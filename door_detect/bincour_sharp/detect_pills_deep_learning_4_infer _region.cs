//
// File generated by HDevelop for HALCON/.NET (C#) Version 19.11.0.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport_region
{
  public HTuple hv_ExpDefaultWinHandle;

  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  // Procedures 
  // Local procedures 
  public void check_data_availability (HTuple hv_ExampleDataDir, HTuple hv_PreprocessParamFileName, 
      HTuple hv_TrainedModelFileName, HTuple hv_UsePretrainedModel)
  {


    // Initialize local and output iconic variables 


  }

  public void create_counting_result_text (HTuple hv_NumberDetectionsPerClass, HTuple hv_ClassNames, 
      out HTuple hv_Text, out HTuple hv_TextColor, out HTuple hv_TextBoxColor)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_Indices = new HTuple(), hv_PillsDuplicateTuple = new HTuple();
    HTuple hv_PillsDuplicateString = new HTuple(), hv_Index = new HTuple();
    HTuple hv_PillsMissingTuple = new HTuple(), hv_PillsMissingString = new HTuple();
    HTuple hv_AddTab = new HTuple();
    // Initialize local and output iconic variables 
    hv_Text = new HTuple();
    hv_TextColor = new HTuple();
    hv_TextBoxColor = new HTuple();
    try
    {
      //This procedure returns a text containing the result of the counting.
      //
      hv_Text.Dispose();
      hv_Text = new HTuple();
      if ((int)(new HTuple(((hv_NumberDetectionsPerClass.TupleMax())).TupleGreater(
          1))) != 0)
      {
        //Get names of duplicate pills.
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = ((hv_NumberDetectionsPerClass.TupleGreaterElem(
            1))).TupleFind(1);
        }
        hv_PillsDuplicateTuple.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PillsDuplicateTuple = hv_ClassNames.TupleSelect(
            hv_Indices);
        }
        hv_PillsDuplicateString.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PillsDuplicateString = hv_PillsDuplicateTuple.TupleSelect(
            0);
        }
        for (hv_Index=1; (int)hv_Index<=(int)((new HTuple(hv_PillsDuplicateTuple.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_PillsDuplicateString = (hv_PillsDuplicateString+new HTuple(", "))+(hv_PillsDuplicateTuple.TupleSelect(
              hv_Index));
          hv_PillsDuplicateString.Dispose();
          hv_PillsDuplicateString = ExpTmpLocalVar_PillsDuplicateString;
          }
          }
        }
        //
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "Duplicate pills: "+hv_PillsDuplicateString;
        hv_TextBoxColor.Dispose();
        hv_TextBoxColor = "red";
        hv_TextColor.Dispose();
        hv_TextColor = "white";
      }
      if ((int)(new HTuple(((hv_NumberDetectionsPerClass.TupleMin())).TupleEqual(
          0))) != 0)
      {
        //Get names of missing pills.
        hv_Indices.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Indices = hv_NumberDetectionsPerClass.TupleFind(
            0);
        }
        hv_PillsMissingTuple.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PillsMissingTuple = hv_ClassNames.TupleSelect(
            hv_Indices);
        }
        hv_PillsMissingString.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PillsMissingString = hv_PillsMissingTuple.TupleSelect(
            0);
        }
        for (hv_Index=1; (int)hv_Index<=(int)((new HTuple(hv_PillsMissingTuple.TupleLength()
            ))-1); hv_Index = (int)hv_Index + 1)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_PillsMissingString = (hv_PillsMissingString+new HTuple(", "))+(hv_PillsMissingTuple.TupleSelect(
              hv_Index));
          hv_PillsMissingString.Dispose();
          hv_PillsMissingString = ExpTmpLocalVar_PillsMissingString;
          }
          }
        }
        //Add tab for better visualization.
        hv_AddTab.Dispose();
        hv_AddTab = "";
        if ((int)(new HTuple(hv_Text.TupleNotEqual(new HTuple()))) != 0)
        {
          hv_AddTab.Dispose();
          hv_AddTab = "  ";
        }
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = (("Pills missing"+hv_AddTab)+": ")+hv_PillsMissingString;
        hv_TextBoxColor.Dispose();
        hv_TextBoxColor = "red";
        hv_TextColor.Dispose();
        hv_TextColor = "white";
      }
      if ((int)(new HTuple(hv_Text.TupleEqual(new HTuple()))) != 0)
      {
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "Bag is fine";
        hv_TextBoxColor.Dispose();
        hv_TextBoxColor = "green";
        hv_TextColor.Dispose();
        hv_TextColor = "black";
      }
      //

      hv_Indices.Dispose();
      hv_PillsDuplicateTuple.Dispose();
      hv_PillsDuplicateString.Dispose();
      hv_Index.Dispose();
      hv_PillsMissingTuple.Dispose();
      hv_PillsMissingString.Dispose();
      hv_AddTab.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Indices.Dispose();
      hv_PillsDuplicateTuple.Dispose();
      hv_PillsDuplicateString.Dispose();
      hv_Index.Dispose();
      hv_PillsMissingTuple.Dispose();
      hv_PillsMissingString.Dispose();
      hv_AddTab.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void create_tiny_example_dataset_with_result (out HTuple hv_DLDataset, out HTuple hv_DLResult)
  {


    // Local iconic variables 

    // Local control variables 

    HTuple hv_ExampleDir = new HTuple(), hv_DLSamples = new HTuple();
    HTuple hv_DLSample = new HTuple();
    // Initialize local and output iconic variables 
    hv_DLDataset = new HTuple();
    hv_DLResult = new HTuple();
    try
    {
      //This procedure creates a tiny dataset out of the pill bag dataset.
      //
      hv_ExampleDir.Dispose();
      HOperatorSet.GetSystem("example_dir", out hv_ExampleDir);
      //Create DLDataset
      hv_DLDataset.Dispose();
      HOperatorSet.CreateDict(out hv_DLDataset);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetDictTuple(hv_DLDataset, "image_dir", hv_ExampleDir+"/images");
      }
      HOperatorSet.SetDictTuple(hv_DLDataset, "class_ids", (((((((((new HTuple(1)).TupleConcat(
          2)).TupleConcat(3)).TupleConcat(4)).TupleConcat(5)).TupleConcat(6)).TupleConcat(
          7)).TupleConcat(8)).TupleConcat(9)).TupleConcat(10));
      HOperatorSet.SetDictTuple(hv_DLDataset, "class_names", (((((((((new HTuple("Omega-3")).TupleConcat(
          "KMW")).TupleConcat("Stomach tablet")).TupleConcat("Ginko")).TupleConcat(
          "Ginseng")).TupleConcat("Glucosamine")).TupleConcat("Cognivia")).TupleConcat(
          "Capsularum I")).TupleConcat("Iron tablet")).TupleConcat("Vitamin-B"));
      //Create Samples
      hv_DLSamples.Dispose();
      hv_DLSamples = new HTuple();
      hv_DLSample.Dispose();
      HOperatorSet.CreateDict(out hv_DLSample);
      HOperatorSet.SetDictTuple(hv_DLSample, "image_id", 36);
      HOperatorSet.SetDictTuple(hv_DLSample, "image_file_name", "pill_bag/pill_bag_036.png");
      HOperatorSet.SetDictTuple(hv_DLSample, "bbox_row1", (((((((new HTuple(177)).TupleConcat(
          242)).TupleConcat(247)).TupleConcat(240)).TupleConcat(453)).TupleConcat(
          127)).TupleConcat(465)).TupleConcat(372));
      HOperatorSet.SetDictTuple(hv_DLSample, "bbox_col1", (((((((new HTuple(692)).TupleConcat(
          362)).TupleConcat(455)).TupleConcat(894)).TupleConcat(436)).TupleConcat(
          915)).TupleConcat(826)).TupleConcat(535));
      HOperatorSet.SetDictTuple(hv_DLSample, "bbox_row2", (((((((new HTuple(287)).TupleConcat(
          376)).TupleConcat(458)).TupleConcat(322)).TupleConcat(554)).TupleConcat(
          244)).TupleConcat(561)).TupleConcat(456));
      HOperatorSet.SetDictTuple(hv_DLSample, "bbox_col2", (((((((new HTuple(933)).TupleConcat(
          493)).TupleConcat(580)).TupleConcat(978)).TupleConcat(672)).TupleConcat(
          1033)).TupleConcat(1037)).TupleConcat(618));
      HOperatorSet.SetDictTuple(hv_DLSample, "bbox_label_id", (((((((new HTuple(1)).TupleConcat(
          3)).TupleConcat(4)).TupleConcat(5)).TupleConcat(6)).TupleConcat(7)).TupleConcat(
          8)).TupleConcat(9));
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_DLSamples = hv_DLSamples.TupleConcat(
          hv_DLSample);
      hv_DLSamples.Dispose();
      hv_DLSamples = ExpTmpLocalVar_DLSamples;
      }
      }
      //
      HOperatorSet.SetDictTuple(hv_DLDataset, "samples", hv_DLSamples);
      //
      //Create a results
      hv_DLResult.Dispose();
      HOperatorSet.CreateDict(out hv_DLResult);
      HOperatorSet.SetDictTuple(hv_DLResult, "bbox_row1", (((((((new HTuple(177)).TupleConcat(
          242)).TupleConcat(247)).TupleConcat(240)).TupleConcat(453)).TupleConcat(
          127)).TupleConcat(465)).TupleConcat(372));
      HOperatorSet.SetDictTuple(hv_DLResult, "bbox_col1", (((((((new HTuple(692)).TupleConcat(
          362)).TupleConcat(455)).TupleConcat(894)).TupleConcat(436)).TupleConcat(
          915)).TupleConcat(826)).TupleConcat(535));
      HOperatorSet.SetDictTuple(hv_DLResult, "bbox_row2", (((((((new HTuple(287)).TupleConcat(
          376)).TupleConcat(458)).TupleConcat(322)).TupleConcat(554)).TupleConcat(
          244)).TupleConcat(561)).TupleConcat(456));
      HOperatorSet.SetDictTuple(hv_DLResult, "bbox_col2", (((((((new HTuple(933)).TupleConcat(
          493)).TupleConcat(580)).TupleConcat(978)).TupleConcat(672)).TupleConcat(
          1033)).TupleConcat(1037)).TupleConcat(618));
      HOperatorSet.SetDictTuple(hv_DLResult, "bbox_class_id", (((((((new HTuple(1)).TupleConcat(
          3)).TupleConcat(4)).TupleConcat(5)).TupleConcat(6)).TupleConcat(7)).TupleConcat(
          8)).TupleConcat(9));
      HOperatorSet.SetDictTuple(hv_DLResult, "bbox_confidence", (((((((new HTuple(0.99871)).TupleConcat(
          1.0)).TupleConcat(1.0)).TupleConcat(0.97492)).TupleConcat(0.96392)).TupleConcat(
          1.0)).TupleConcat(1.0)).TupleConcat(0.99123));
      //

      hv_ExampleDir.Dispose();
      hv_DLSamples.Dispose();
      hv_DLSample.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ExampleDir.Dispose();
      hv_DLSamples.Dispose();
      hv_DLSample.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_close_example_image_window (HTuple hv_ExampleInternals)
  {



    // Local control variables 

    HTuple hv_WindowHandleImages = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure closes the image window.
      //
      try
      {
        hv_WindowHandleImages.Dispose();
        HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
        //dev_set_window(...);
        //dev_close_window(...);
        //Delete key.
        HOperatorSet.RemoveDictKey(hv_ExampleInternals, "window_images");
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }
      //

      hv_WindowHandleImages.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowHandleImages.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_close_example_legend_window (HTuple hv_ExampleInternals)
  {



    // Local control variables 

    HTuple hv_WindowHandleLegend = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure closes the legend window.
      //
      try
      {
        hv_WindowHandleLegend.Dispose();
        HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_legend", out hv_WindowHandleLegend);
        //dev_set_window(...);
        //dev_close_window(...);
        //Delete key.
        HOperatorSet.RemoveDictKey(hv_ExampleInternals, "window_legend");
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }
      //

      hv_WindowHandleLegend.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowHandleLegend.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_close_example_text_window (HTuple hv_ExampleInternals)
  {



    // Local control variables 

    HTuple hv_WindowHandleImages = new HTuple();
    HTuple hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure closes the text window.
      //
      try
      {
        hv_WindowHandleImages.Dispose();
        HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleImages);
        //dev_set_window(...);
        //dev_close_window(...);
        //Delete key.
        HOperatorSet.RemoveDictKey(hv_ExampleInternals, "window_text");
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }

      hv_WindowHandleImages.Dispose();
      hv_Exception.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowHandleImages.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_close_example_windows (HTuple hv_ExampleInternals)
  {



    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure closes all example windows.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {

        hv_ShowExampleScreens.Dispose();

        return;
      }
      //
      dev_close_example_text_window(hv_ExampleInternals);
      dev_close_example_image_window(hv_ExampleInternals);
      dev_close_example_legend_window(hv_ExampleInternals);
      //

      hv_ShowExampleScreens.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ShowExampleScreens.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_example_reset_windows (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_WindowHandlesToClose = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_I = new HTuple();
    HTuple hv_WindowHandleKeys = new HTuple(), hv_Index = new HTuple();
    HTuple hv_WindowImagesNeeded = new HTuple(), hv_WindowLegendNeeded = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_WindowHandleLegend = new HTuple();
    HTuple hv_WindowHandleText = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure resets the graphics windows.
      //
      //Close any windows that are listed in key 'window_handles_to_close'.
      try
      {
        hv_WindowHandlesToClose.Dispose();
        HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_handles_to_close", 
            out hv_WindowHandlesToClose);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_WindowHandlesToClose.Dispose();
        hv_WindowHandlesToClose = new HTuple();
      }
      for (hv_I=0; (int)hv_I<=(int)((new HTuple(hv_WindowHandlesToClose.TupleLength()
          ))-1); hv_I = (int)hv_I + 1)
      {
        //dev_set_window(...);
        //dev_close_window(...);
      }
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_handles_to_close", new HTuple());
      //
      //Open image window if needed
      hv_WindowHandleKeys.Dispose();
      HOperatorSet.GetDictParam(hv_ExampleInternals, "keys", new HTuple(), out hv_WindowHandleKeys);
      hv_Index.Dispose();
      HOperatorSet.TupleFind(hv_WindowHandleKeys, "window_images", out hv_Index);
      hv_WindowImagesNeeded.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_needed", out hv_WindowImagesNeeded);
      if ((int)(hv_WindowImagesNeeded.TupleAnd(new HTuple(hv_Index.TupleEqual(-1)))) != 0)
      {
        //Open new window for images
        dev_open_example_image_window(hv_ExampleInternals);
      }
      else if ((int)((new HTuple(hv_WindowImagesNeeded.TupleNot())).TupleAnd(
          new HTuple(hv_Index.TupleNotEqual(-1)))) != 0)
      {
        //Window for images exists but is not needed -> close it
        dev_close_example_image_window(hv_ExampleInternals);
      }
      //
      //Open legend window if needed
      hv_WindowHandleKeys.Dispose();
      HOperatorSet.GetDictParam(hv_ExampleInternals, "keys", new HTuple(), out hv_WindowHandleKeys);
      hv_Index.Dispose();
      HOperatorSet.TupleFind(hv_WindowHandleKeys, "window_legend", out hv_Index);
      hv_WindowLegendNeeded.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_legend_needed", out hv_WindowLegendNeeded);
      if ((int)(hv_WindowLegendNeeded.TupleAnd(new HTuple(hv_Index.TupleEqual(-1)))) != 0)
      {
        //Open new window for legend
        dev_open_example_legend_window(hv_ExampleInternals, 280);
      }
      else if ((int)((new HTuple(hv_WindowLegendNeeded.TupleNot())).TupleAnd(
          new HTuple(hv_Index.TupleNotEqual(-1)))) != 0)
      {
        //Window for legend exists but is not needed -> close it
        dev_close_example_legend_window(hv_ExampleInternals);
      }
      //
      //Set the correct area (part) of the image window.
      try
      {
        hv_WindowHandleImages.Dispose();
        HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
        //dev_set_window(...);
        HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
        //Set default window extends
        //dev_set_window_extents(...);
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 1, 1, -1, -1);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }
      //
      //Set the correct area (part) of the legend window.
      try
      {
        hv_WindowHandleLegend.Dispose();
        HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_legend", out hv_WindowHandleLegend);
        //dev_set_window(...);
        HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 1, 1, -1, -1);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);

      hv_WindowHandlesToClose.Dispose();
      hv_Exception.Dispose();
      hv_I.Dispose();
      hv_WindowHandleKeys.Dispose();
      hv_Index.Dispose();
      hv_WindowImagesNeeded.Dispose();
      hv_WindowLegendNeeded.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_WindowHandleLegend.Dispose();
      hv_WindowHandleText.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowHandlesToClose.Dispose();
      hv_Exception.Dispose();
      hv_I.Dispose();
      hv_WindowHandleKeys.Dispose();
      hv_Index.Dispose();
      hv_WindowImagesNeeded.Dispose();
      hv_WindowLegendNeeded.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_WindowHandleLegend.Dispose();
      hv_WindowHandleText.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_example_images (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    HObject ho_Image=null;

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_UsePretrainedModel = new HTuple(), hv_PreprocessParamFileName = new HTuple();
    HTuple hv_PreprocessParamExists = new HTuple(), hv_RetrainedModelFileName = new HTuple();
    HTuple hv_ModelExists = new HTuple(), hv_ExampleDataDir = new HTuple();
    HTuple hv_DataDirectory = new HTuple(), hv_WindowImageNeeded = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_ExampleImageFile = new HTuple(), hv_WindowHandleImages = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    try
    {
      //This procedure displays an overview on the different example parts.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {
        ho_Image.Dispose();

        hv_ShowExampleScreens.Dispose();
        hv_UsePretrainedModel.Dispose();
        hv_PreprocessParamFileName.Dispose();
        hv_PreprocessParamExists.Dispose();
        hv_RetrainedModelFileName.Dispose();
        hv_ModelExists.Dispose();
        hv_ExampleDataDir.Dispose();
        hv_DataDirectory.Dispose();
        hv_WindowImageNeeded.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_ExampleImageFile.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();

        return;
      }
      hv_UsePretrainedModel.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "use_pretrained_model", out hv_UsePretrainedModel);
      if ((int)(hv_UsePretrainedModel) != 0)
      {
        //Check if the pretrained model and preprocessing parameters are available.
        //
        //File name of dict containing parameters used for preprocessing.
        hv_PreprocessParamFileName.Dispose();
        hv_PreprocessParamFileName = "detect_pills_preprocess_param.hdict";
        hv_PreprocessParamExists.Dispose();
        HOperatorSet.FileExists(hv_PreprocessParamFileName, out hv_PreprocessParamExists);
        //
        //File name of dict containing parameters used for preprocessing.
        hv_RetrainedModelFileName.Dispose();
        hv_RetrainedModelFileName = "detect_pills.hdl";
        hv_ModelExists.Dispose();
        HOperatorSet.FileExists(hv_RetrainedModelFileName, out hv_ModelExists);
      }
      else
      {
        //Check if the trained model and preprocessing parameters are available.
        //
        //Example data folder containing the outputs of the previous example series.
        hv_ExampleDataDir.Dispose();
        hv_ExampleDataDir = "detect_pills_data";
        //
        //File name of dict containing parameters used for preprocessing.
        hv_DataDirectory.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DataDirectory = hv_ExampleDataDir+"/dldataset_pill_bag_512x320";
        }
        hv_PreprocessParamFileName.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PreprocessParamFileName = hv_DataDirectory+"/dl_preprocess_param.hdict";
        }
        hv_PreprocessParamExists.Dispose();
        HOperatorSet.FileExists(hv_PreprocessParamFileName, out hv_PreprocessParamExists);
        //
        //File name of dict containing parameters used for preprocessing.
        hv_RetrainedModelFileName.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_RetrainedModelFileName = hv_ExampleDataDir+"/best_dl_model_detection.hdl";
        }
        hv_ModelExists.Dispose();
        HOperatorSet.FileExists(hv_RetrainedModelFileName, out hv_ModelExists);
      }
      //Reset the open windows for a clean display.
      hv_WindowImageNeeded.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_WindowImageNeeded = hv_PreprocessParamExists.TupleAnd(
          hv_ModelExists);
      }
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", hv_WindowImageNeeded);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      if ((int)((new HTuple(hv_PreprocessParamExists.TupleNot())).TupleOr(hv_ModelExists.TupleNot()
          )) != 0)
      {
        if ((int)(hv_UsePretrainedModel) != 0)
        {
          hv_Text.Dispose();
          hv_Text = "The pretrained model and corresponding preprocessing";
          if (hv_Text == null)
            hv_Text = new HTuple();
          hv_Text[new HTuple(hv_Text.TupleLength())] = "parameters could not be found.";
          if (hv_Text == null)
            hv_Text = new HTuple();
          hv_Text[new HTuple(hv_Text.TupleLength())] = "";
          if (hv_Text == null)
            hv_Text = new HTuple();
          hv_Text[new HTuple(hv_Text.TupleLength())] = "These files are part of a separate installer. Please";
          if (hv_Text == null)
            hv_Text = new HTuple();
          hv_Text[new HTuple(hv_Text.TupleLength())] = "refer to the Installation Guide for more information on";
          if (hv_Text == null)
            hv_Text = new HTuple();
          hv_Text[new HTuple(hv_Text.TupleLength())] = "this topic!";
        }
        else
        {
          //
          //Part 1 and/or part 2 should be run before continuing this example.
          hv_Text.Dispose();
          hv_Text = "To run this example you need the output of:";
          if ((int)(hv_PreprocessParamExists.TupleNot()) != 0)
          {
            if (hv_Text == null)
              hv_Text = new HTuple();
            hv_Text[new HTuple(hv_Text.TupleLength())] = "- 'detect_pills_deep_learning_1_prepare.hdev'";
          }
          if ((int)(hv_ModelExists.TupleNot()) != 0)
          {
            if (hv_Text == null)
              hv_Text = new HTuple();
            hv_Text[new HTuple(hv_Text.TupleLength())] = "- 'detect_pills_deep_learning_2_train.hdev'";
          }
          if (hv_Text == null)
            hv_Text = new HTuple();
          hv_Text[new HTuple(hv_Text.TupleLength())] = "";
          if ((int)((new HTuple(hv_PreprocessParamExists.TupleNot())).TupleAnd(hv_ModelExists.TupleNot()
              )) != 0)
          {
            if (hv_Text == null)
              hv_Text = new HTuple();
            hv_Text[new HTuple(hv_Text.TupleLength())] = "Please run these examples first.";
          }
          else
          {
            if (hv_Text == null)
              hv_Text = new HTuple();
            hv_Text[new HTuple(hv_Text.TupleLength())] = "Please run this example first.";
          }
          if (hv_Text == null)
            hv_Text = new HTuple();
          hv_Text[HTuple.TupleGenSequence(new HTuple(hv_Text.TupleLength()),(new HTuple(hv_Text.TupleLength()
              ))+2,1)] = ((new HTuple("Alternatively, you can set 'UsePretrainedModel := true' ")).TupleConcat(
              "at the top of the example script to use an already trained")).TupleConcat(
              "model shipped with the HALCON installation.");
        }
        //
        set_display_font(hv_ExpDefaultWinHandle, 20, "mono", "true", "false");
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
            "red", "box", "true");
        set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");
      }
      else
      {
        //
        //All parts have been run before, hence continue with the example text.
        hv_Text.Dispose();
        hv_Text = "We now have a trained DL object detection model.";
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "We are ready to apply it to new images.";
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "";
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "These images are not part of the preprocessed dataset.";
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "";
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("The images have to be preprocessed in the same way as the DLDataset,");
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "which was used for training (see example series part 1).";
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "";
        if (hv_Text == null)
          hv_Text = new HTuple();
        hv_Text[new HTuple(hv_Text.TupleLength())] = "Below you see an example image.";
        //
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
            "black", "box", "true");
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
            "window", "bottom", "right", "black", new HTuple(), new HTuple());
        //
        //Display an example image
        hv_ExampleImageFile.Dispose();
        hv_ExampleImageFile = "/pill_bag/pill_bag_036.png";
        //Add example image to ExampleInternals reuse it later
        HOperatorSet.SetDictTuple(hv_ExampleInternals, "example_image_file", hv_ExampleImageFile);
        ho_Image.Dispose();
        HOperatorSet.ReadImage(out ho_Image, hv_ExampleImageFile);
        hv_WindowHandleImages.Dispose();
        HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
        //dev_set_window(...);
        hv_Width.Dispose();hv_Height.Dispose();
        HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
        }
        HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
      }
      //
      ho_Image.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_UsePretrainedModel.Dispose();
      hv_PreprocessParamFileName.Dispose();
      hv_PreprocessParamExists.Dispose();
      hv_RetrainedModelFileName.Dispose();
      hv_ModelExists.Dispose();
      hv_ExampleDataDir.Dispose();
      hv_DataDirectory.Dispose();
      hv_WindowImageNeeded.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_UsePretrainedModel.Dispose();
      hv_PreprocessParamFileName.Dispose();
      hv_PreprocessParamExists.Dispose();
      hv_RetrainedModelFileName.Dispose();
      hv_ModelExists.Dispose();
      hv_ExampleDataDir.Dispose();
      hv_DataDirectory.Dispose();
      hv_WindowImageNeeded.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_final (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure shows the final message of the example series.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();

        return;
      }
      //
      dev_open_example_text_window(hv_ExampleInternals);
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 0);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      //Display instruction text.
      hv_Text.Dispose();
      hv_Text = "Congratulations!";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "You have finished the series of examples for DL object detection.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "You can now train a DL object detection model on your own data.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "End of program.", "window", 
          "bottom", "right", "black", "box", "true");
      //

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_inference_step_1 (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    HObject ho_ImageRaw;

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_ExampleImageFile = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageRaw);
    try
    {
      //This procedure displays the second explanatory part of the inference.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {
        ho_ImageRaw.Dispose();

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_ExampleImageFile.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 1);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "Inference steps for one image:";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "1. Generate a DLSample for the image using";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "   'gen_dl_samples_from_images'.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //
      //Display example images,
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      //
      hv_ExampleImageFile.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "example_image_file", out hv_ExampleImageFile);
      ho_ImageRaw.Dispose();
      HOperatorSet.ReadImage(out ho_ImageRaw, hv_ExampleImageFile);
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageRaw, out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.DispObj(ho_ImageRaw, hv_ExpDefaultWinHandle);
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Raw image", "window", "top", 
          "left", "black", new HTuple(), new HTuple());
      //
      HOperatorSet.FlushBuffer(hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "true");
      //
      ho_ImageRaw.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageRaw.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_inference_step_2_part_1 (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    HObject ho_ImageRaw, ho_ImagePart, ho_ImagePart2;
    HObject ho_ImageTrans, ho_Loupe1, ho_Loupe2, ho_LoupeLine1;
    HObject ho_LoupeLine2;

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_ExampleImageFile = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_LoupeZoom = new HTuple(), hv_LoupeMargin = new HTuple();
    HTuple hv_LoupeWindowSize = new HTuple(), hv_LoupeRow1 = new HTuple();
    HTuple hv_LoupeColumn1 = new HTuple(), hv_HomMat2DIdentity = new HTuple();
    HTuple hv_HomMat2DTranslate = new HTuple(), hv__ = new HTuple();
    HTuple hv_TextHeight = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageRaw);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    HOperatorSet.GenEmptyObj(out ho_ImagePart2);
    HOperatorSet.GenEmptyObj(out ho_ImageTrans);
    HOperatorSet.GenEmptyObj(out ho_Loupe1);
    HOperatorSet.GenEmptyObj(out ho_Loupe2);
    HOperatorSet.GenEmptyObj(out ho_LoupeLine1);
    HOperatorSet.GenEmptyObj(out ho_LoupeLine2);
    try
    {
      //This procedure displays the second explanatory part of the inference.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {
        ho_ImageRaw.Dispose();
        ho_ImagePart.Dispose();
        ho_ImagePart2.Dispose();
        ho_ImageTrans.Dispose();
        ho_Loupe1.Dispose();
        ho_Loupe2.Dispose();
        ho_LoupeLine1.Dispose();
        ho_LoupeLine2.Dispose();

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_ExampleImageFile.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_LoupeZoom.Dispose();
        hv_LoupeMargin.Dispose();
        hv_LoupeWindowSize.Dispose();
        hv_LoupeRow1.Dispose();
        hv_LoupeColumn1.Dispose();
        hv_HomMat2DIdentity.Dispose();
        hv_HomMat2DTranslate.Dispose();
        hv__.Dispose();
        hv_TextHeight.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 1);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "Inference steps for one image:";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "1. Generate a DLSample for the image using";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "   'gen_dl_samples_from_images'.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "2. Preprocess the image to suit the trained model";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "   using 'preprocess_dl_samples'.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //
      //Display example images,
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      //
      hv_ExampleImageFile.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "example_image_file", out hv_ExampleImageFile);
      ho_ImageRaw.Dispose();
      HOperatorSet.ReadImage(out ho_ImageRaw, hv_ExampleImageFile);
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageRaw, out hv_Width, out hv_Height);
      //
      //Create a loupe to see difference of resolution
      hv_LoupeZoom.Dispose();
      hv_LoupeZoom = 7.0;
      hv_LoupeMargin.Dispose();
      hv_LoupeMargin = 30;
      hv_LoupeWindowSize.Dispose();
      hv_LoupeWindowSize = 45;
      hv_LoupeRow1.Dispose();
      hv_LoupeRow1 = 368;
      hv_LoupeColumn1.Dispose();
      hv_LoupeColumn1 = 577;
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "light blue");
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);
      //Preapare images for loupe
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ImagePart.Dispose();
      HOperatorSet.CropRectangle1(ho_ImageRaw, out ho_ImagePart, hv_LoupeRow1, hv_LoupeColumn1, 
          (hv_LoupeRow1+hv_LoupeWindowSize)-1, (hv_LoupeColumn1+hv_LoupeWindowSize)-1);
      }
      ho_ImagePart2.Dispose();
      HOperatorSet.ZoomImageFactor(ho_ImagePart, out ho_ImagePart2, hv_LoupeZoom, 
          hv_LoupeZoom, "nearest_neighbor");
      hv_HomMat2DIdentity.Dispose();
      HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HomMat2DTranslate.Dispose();
      HOperatorSet.HomMat2dTranslate(hv_HomMat2DIdentity, (hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin, 
          hv_LoupeMargin, out hv_HomMat2DTranslate);
      }
      ho_ImageTrans.Dispose();
      HOperatorSet.AffineTransImage(ho_ImagePart2, out ho_ImageTrans, hv_HomMat2DTranslate, 
          "constant", "true");
      //Draw loupe rectangles
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Loupe1.Dispose();
      HOperatorSet.GenRectangle1(out ho_Loupe1, hv_LoupeRow1, hv_LoupeColumn1, hv_LoupeRow1+hv_LoupeWindowSize, 
          hv_LoupeColumn1+hv_LoupeWindowSize);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Loupe2.Dispose();
      HOperatorSet.GenRectangle1(out ho_Loupe2, (hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin, 
          hv_LoupeMargin, (hv_Height-hv_LoupeMargin)-1, ((hv_LoupeZoom*hv_LoupeWindowSize)+hv_LoupeMargin)-1);
      }
      //Draw loupe lines
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_LoupeLine1.Dispose();
      HOperatorSet.GenRegionLine(out ho_LoupeLine1, (hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin, 
          hv_LoupeMargin, hv_LoupeRow1, hv_LoupeColumn1);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_LoupeLine2.Dispose();
      HOperatorSet.GenRegionLine(out ho_LoupeLine2, (hv_Height-hv_LoupeMargin)-1, 
          ((hv_LoupeZoom*hv_LoupeWindowSize)+hv_LoupeMargin)-1, hv_LoupeRow1+hv_LoupeWindowSize, 
          hv_LoupeColumn1+hv_LoupeWindowSize);
      }
      //
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageRaw, out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.DispObj(ho_ImageRaw, hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      HOperatorSet.DispObj(ho_ImageTrans, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Loupe1, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Loupe2, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_LoupeLine1, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_LoupeLine2, hv_ExpDefaultWinHandle);
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Raw image", "window", "top", 
          "left", "black", new HTuple(), new HTuple());
      //
      hv__.Dispose();hv__.Dispose();hv__.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, "test_string", out hv__, 
          out hv__, out hv__, out hv_TextHeight);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Original resolution", "image", 
          ((hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin)-(3*hv_TextHeight), 
          hv_LoupeMargin, "black", new HTuple(), new HTuple());
      }
      //
      HOperatorSet.FlushBuffer(hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "true");
      //
      ho_ImageRaw.Dispose();
      ho_ImagePart.Dispose();
      ho_ImagePart2.Dispose();
      ho_ImageTrans.Dispose();
      ho_Loupe1.Dispose();
      ho_Loupe2.Dispose();
      ho_LoupeLine1.Dispose();
      ho_LoupeLine2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_LoupeZoom.Dispose();
      hv_LoupeMargin.Dispose();
      hv_LoupeWindowSize.Dispose();
      hv_LoupeRow1.Dispose();
      hv_LoupeColumn1.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DTranslate.Dispose();
      hv__.Dispose();
      hv_TextHeight.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageRaw.Dispose();
      ho_ImagePart.Dispose();
      ho_ImagePart2.Dispose();
      ho_ImageTrans.Dispose();
      ho_Loupe1.Dispose();
      ho_Loupe2.Dispose();
      ho_LoupeLine1.Dispose();
      ho_LoupeLine2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_LoupeZoom.Dispose();
      hv_LoupeMargin.Dispose();
      hv_LoupeWindowSize.Dispose();
      hv_LoupeRow1.Dispose();
      hv_LoupeColumn1.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DTranslate.Dispose();
      hv__.Dispose();
      hv_TextHeight.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_inference_step_2_part_2 (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    HObject ho_ImageRaw, ho_ImageZoomed, ho_ImagePart;
    HObject ho_ImagePart2, ho_ImageTrans, ho_Loupe1, ho_Loupe2;
    HObject ho_LoupeLine1, ho_LoupeLine2;

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_ExampleImageFile = new HTuple();
    HTuple hv_RawWidth = new HTuple(), hv_RawHeight = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_ZoomFactor = new HTuple(), hv_LoupeZoom = new HTuple();
    HTuple hv_LoupeMargin = new HTuple(), hv_LoupeWindowSize = new HTuple();
    HTuple hv_LoupeRow1 = new HTuple(), hv_LoupeColumn1 = new HTuple();
    HTuple hv_HomMat2DIdentity = new HTuple(), hv_HomMat2DTranslate = new HTuple();
    HTuple hv__ = new HTuple(), hv_TextHeight = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageRaw);
    HOperatorSet.GenEmptyObj(out ho_ImageZoomed);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    HOperatorSet.GenEmptyObj(out ho_ImagePart2);
    HOperatorSet.GenEmptyObj(out ho_ImageTrans);
    HOperatorSet.GenEmptyObj(out ho_Loupe1);
    HOperatorSet.GenEmptyObj(out ho_Loupe2);
    HOperatorSet.GenEmptyObj(out ho_LoupeLine1);
    HOperatorSet.GenEmptyObj(out ho_LoupeLine2);
    try
    {
      //This procedure displays the second explanatory part of the inference.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {
        ho_ImageRaw.Dispose();
        ho_ImageZoomed.Dispose();
        ho_ImagePart.Dispose();
        ho_ImagePart2.Dispose();
        ho_ImageTrans.Dispose();
        ho_Loupe1.Dispose();
        ho_Loupe2.Dispose();
        ho_LoupeLine1.Dispose();
        ho_LoupeLine2.Dispose();

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_ExampleImageFile.Dispose();
        hv_RawWidth.Dispose();
        hv_RawHeight.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_ZoomFactor.Dispose();
        hv_LoupeZoom.Dispose();
        hv_LoupeMargin.Dispose();
        hv_LoupeWindowSize.Dispose();
        hv_LoupeRow1.Dispose();
        hv_LoupeColumn1.Dispose();
        hv_HomMat2DIdentity.Dispose();
        hv_HomMat2DTranslate.Dispose();
        hv__.Dispose();
        hv_TextHeight.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 1);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "Inference steps for one image:";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "1. Generate a DLSample for the image using";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "   'gen_dl_samples_from_images'.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "2. Preprocess the image to suit the trained model";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "   using 'preprocess_dl_samples'.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //
      //Display example images,
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      //
      hv_ExampleImageFile.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "example_image_file", out hv_ExampleImageFile);
      ho_ImageRaw.Dispose();
      HOperatorSet.ReadImage(out ho_ImageRaw, hv_ExampleImageFile);
      hv_RawWidth.Dispose();hv_RawHeight.Dispose();
      HOperatorSet.GetImageSize(ho_ImageRaw, out hv_RawWidth, out hv_RawHeight);
      ho_ImageZoomed.Dispose();
      HOperatorSet.ZoomImageSize(ho_ImageRaw, out ho_ImageZoomed, 512, 320, "constant");
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageZoomed, out hv_Width, out hv_Height);
      hv_ZoomFactor.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZoomFactor = hv_Height/(hv_RawHeight.TupleReal()
          );
      }
      //
      //Create a loupe to see difference of resolution
      hv_LoupeZoom.Dispose();
      hv_LoupeZoom = 7.0;
      hv_LoupeMargin.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_LoupeMargin = 30*hv_ZoomFactor;
      }
      hv_LoupeWindowSize.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_LoupeWindowSize = 45*hv_ZoomFactor;
      }
      hv_LoupeRow1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_LoupeRow1 = 368*hv_ZoomFactor;
      }
      hv_LoupeColumn1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_LoupeColumn1 = 577*hv_ZoomFactor;
      }
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "light blue");
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);
      //Preapare images for loupe
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ImagePart.Dispose();
      HOperatorSet.CropRectangle1(ho_ImageZoomed, out ho_ImagePart, hv_LoupeRow1, 
          hv_LoupeColumn1, (hv_LoupeRow1+hv_LoupeWindowSize)-1, (hv_LoupeColumn1+hv_LoupeWindowSize)-1);
      }
      ho_ImagePart2.Dispose();
      HOperatorSet.ZoomImageFactor(ho_ImagePart, out ho_ImagePart2, hv_LoupeZoom, 
          hv_LoupeZoom, "nearest_neighbor");
      hv_HomMat2DIdentity.Dispose();
      HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HomMat2DTranslate.Dispose();
      HOperatorSet.HomMat2dTranslate(hv_HomMat2DIdentity, (hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin, 
          hv_LoupeMargin, out hv_HomMat2DTranslate);
      }
      ho_ImageTrans.Dispose();
      HOperatorSet.AffineTransImage(ho_ImagePart2, out ho_ImageTrans, hv_HomMat2DTranslate, 
          "constant", "true");
      //Draw loupe rectangles
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Loupe1.Dispose();
      HOperatorSet.GenRectangle1(out ho_Loupe1, hv_LoupeRow1, hv_LoupeColumn1, hv_LoupeRow1+hv_LoupeWindowSize, 
          hv_LoupeColumn1+hv_LoupeWindowSize);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Loupe2.Dispose();
      HOperatorSet.GenRectangle1(out ho_Loupe2, (hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin, 
          hv_LoupeMargin, (hv_Height-hv_LoupeMargin)-5, ((hv_LoupeZoom*hv_LoupeWindowSize)+hv_LoupeMargin)-5);
      }
      //Draw loupe lines
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_LoupeLine1.Dispose();
      HOperatorSet.GenRegionLine(out ho_LoupeLine1, (hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin, 
          hv_LoupeMargin, hv_LoupeRow1, hv_LoupeColumn1);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_LoupeLine2.Dispose();
      HOperatorSet.GenRegionLine(out ho_LoupeLine2, (hv_Height-hv_LoupeMargin)-5, 
          ((hv_LoupeZoom*hv_LoupeWindowSize)+hv_LoupeMargin)-5, hv_LoupeRow1+hv_LoupeWindowSize, 
          hv_LoupeColumn1+hv_LoupeWindowSize);
      }
      //
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_ImageZoomed, out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.DispObj(ho_ImageZoomed, hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      HOperatorSet.DispObj(ho_ImageTrans, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Loupe1, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Loupe2, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_LoupeLine1, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_LoupeLine2, hv_ExpDefaultWinHandle);
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Preprocessed image for image size 512 x 320", 
          "window", "top", "left", "black", new HTuple(), new HTuple());
      //
      hv__.Dispose();hv__.Dispose();hv__.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, "test_string", out hv__, 
          out hv__, out hv__, out hv_TextHeight);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Reduced resolution", "image", 
          ((hv_Height-(hv_LoupeZoom*hv_LoupeWindowSize))-hv_LoupeMargin)-((3*hv_TextHeight)*hv_ZoomFactor), 
          hv_LoupeMargin, "black", new HTuple(), new HTuple());
      }
      //
      HOperatorSet.FlushBuffer(hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "true");
      //
      ho_ImageRaw.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ImagePart2.Dispose();
      ho_ImageTrans.Dispose();
      ho_Loupe1.Dispose();
      ho_Loupe2.Dispose();
      ho_LoupeLine1.Dispose();
      ho_LoupeLine2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_RawWidth.Dispose();
      hv_RawHeight.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ZoomFactor.Dispose();
      hv_LoupeZoom.Dispose();
      hv_LoupeMargin.Dispose();
      hv_LoupeWindowSize.Dispose();
      hv_LoupeRow1.Dispose();
      hv_LoupeColumn1.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DTranslate.Dispose();
      hv__.Dispose();
      hv_TextHeight.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageRaw.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ImagePart2.Dispose();
      ho_ImageTrans.Dispose();
      ho_Loupe1.Dispose();
      ho_Loupe2.Dispose();
      ho_LoupeLine1.Dispose();
      ho_LoupeLine2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ExampleImageFile.Dispose();
      hv_RawWidth.Dispose();
      hv_RawHeight.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ZoomFactor.Dispose();
      hv_LoupeZoom.Dispose();
      hv_LoupeMargin.Dispose();
      hv_LoupeWindowSize.Dispose();
      hv_LoupeRow1.Dispose();
      hv_LoupeColumn1.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DTranslate.Dispose();
      hv__.Dispose();
      hv_TextHeight.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_inference_step_3 (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_DLDataset = new HTuple();
    HTuple hv_DLResult = new HTuple(), hv_WindowHandleLegend = new HTuple();
    HTuple hv_WindowHandleDict = new HTuple(), hv_GenParamValue = new HTuple();
    HTuple hv_WindowImageColumn1 = new HTuple(), hv_WindowImageRow1 = new HTuple();
    HTuple hv_WindowImageWidth = new HTuple(), hv_WindowImageHeight = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_DLSample = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays the third explanatory part of the inference.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_DLDataset.Dispose();
        hv_DLResult.Dispose();
        hv_WindowHandleLegend.Dispose();
        hv_WindowHandleDict.Dispose();
        hv_GenParamValue.Dispose();
        hv_WindowImageColumn1.Dispose();
        hv_WindowImageRow1.Dispose();
        hv_WindowImageWidth.Dispose();
        hv_WindowImageHeight.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_DLSample.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 1);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 1);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "Inference steps for one image:";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "1. Generate a DLSample for the image using";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "   'gen_dl_samples_from_images'.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "2. Preprocess the image to fit the trained model";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "   using 'preprocess_dl_samples'.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "3. Apply the model using 'apply_dl_model'.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //
      //Display example images,
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      //
      //Read a tiny dataset with a single sample from the pill bag dataset.
      hv_DLDataset.Dispose();hv_DLResult.Dispose();
      create_tiny_example_dataset_with_result(out hv_DLDataset, out hv_DLResult);
      //
      //Display a temporary legend.
      hv_WindowHandleLegend.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_legend", out hv_WindowHandleLegend);
      //dev_set_window(...);
      //
      hv_WindowHandleDict.Dispose();
      HOperatorSet.CreateDict(out hv_WindowHandleDict);
      hv_GenParamValue.Dispose();
      HOperatorSet.GetDictParam(hv_ExampleInternals, "keys", new HTuple(), out hv_GenParamValue);
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      //To display the Text at the bottom of the image such that the image is undistorted,
      //change size of windows.
      hv_WindowImageColumn1.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_x", out hv_WindowImageColumn1);
      hv_WindowImageRow1.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_y", out hv_WindowImageRow1);
      hv_WindowImageWidth.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_width", out hv_WindowImageWidth);
      hv_WindowImageHeight.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_height", out hv_WindowImageHeight);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_WindowImageHeight = hv_WindowImageHeight+39.88;
      hv_WindowImageHeight.Dispose();
      hv_WindowImageHeight = ExpTmpLocalVar_WindowImageHeight;
      }
      }
      //dev_set_window_extents(...);
      //Same for legend window
      hv_Row.Dispose();hv_Column.Dispose();hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_Row, out hv_Column, 
          out hv_Width, out hv_Height);
      //dev_set_window(...);
      //dev_set_window_extents(...);
      //dev_set_window(...);
      //
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetDictTuple(hv_WindowHandleDict, "bbox_result", hv_WindowHandleImages.TupleConcat(
          hv_WindowHandleLegend));
      }
      //
      //Display the sample contained in tiny dataset.
      hv_DLSample.Dispose();
      gen_dl_samples(hv_DLDataset, 0, "detection", new HTuple(), out hv_DLSample);
      dev_display_dl_data(hv_DLSample, hv_DLResult, hv_DLDataset, "bbox_result", 
          new HTuple(), hv_WindowHandleDict);
      //
      //dev_set_window(...);
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Output of 'apply_dl_model'", 
          "window", "top", "left", "black", new HTuple(), new HTuple());
      //dev_set_window(...);
      //dev_set_window(...);
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_DLDataset.Dispose();
      hv_DLResult.Dispose();
      hv_WindowHandleLegend.Dispose();
      hv_WindowHandleDict.Dispose();
      hv_GenParamValue.Dispose();
      hv_WindowImageColumn1.Dispose();
      hv_WindowImageRow1.Dispose();
      hv_WindowImageWidth.Dispose();
      hv_WindowImageHeight.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_DLSample.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_DLDataset.Dispose();
      hv_DLResult.Dispose();
      hv_WindowHandleLegend.Dispose();
      hv_WindowHandleDict.Dispose();
      hv_GenParamValue.Dispose();
      hv_WindowImageColumn1.Dispose();
      hv_WindowImageRow1.Dispose();
      hv_WindowImageWidth.Dispose();
      hv_WindowImageHeight.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_DLSample.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_introduction (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure displays an overview on the different example parts.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 0);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = new HTuple("This example is part of a series of examples, which summarize ");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "the workflow for DL object detection. It uses the MVTec pill bag dataset.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "The four parts are: ";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "1. Creation of the model and dataset preprocessing.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "2. Training of the model.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "3. Evaluation of the trained model.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "4. Inference on new images.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "This example covers part 4: 'Inference on new images'.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_max_overlap (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    HObject ho_Image, ho_ImageZoomed, ho_ImagePart;
    HObject ho_ObjectsConcat, ho_TiledImage, ho_Line, ho_BoxGinko;
    HObject ho_BoxCapsularumI, ho_BoxGinko2, ho_BoxCapsularumI2;
    HObject ho_BadBox1, ho_BadBox2;

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_ImageWidth = new HTuple();
    HTuple hv_ImageHeight = new HTuple(), hv_ImageZoomWidth = new HTuple();
    HTuple hv_ZoomedImageToImage = new HTuple(), hv_ImageZoomHeight = new HTuple();
    HTuple hv_ImageRatio = new HTuple(), hv_Ratio = new HTuple();
    HTuple hv_CropHeight = new HTuple(), hv_CropWidth = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Col1 = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Col2 = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_ColorsRainbow = new HTuple(), hv_Colors = new HTuple();
    HTuple hv_ColorGinko = new HTuple(), hv_ColorCapsularumI = new HTuple();
    HTuple hv_LineWidth = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = new HTuple(), hv__ = new HTuple();
    HTuple hv_TextWidth = new HTuple(), hv_TextHeight = new HTuple();
    HTuple hv_TextCol = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageZoomed);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    HOperatorSet.GenEmptyObj(out ho_ObjectsConcat);
    HOperatorSet.GenEmptyObj(out ho_TiledImage);
    HOperatorSet.GenEmptyObj(out ho_Line);
    HOperatorSet.GenEmptyObj(out ho_BoxGinko);
    HOperatorSet.GenEmptyObj(out ho_BoxCapsularumI);
    HOperatorSet.GenEmptyObj(out ho_BoxGinko2);
    HOperatorSet.GenEmptyObj(out ho_BoxCapsularumI2);
    HOperatorSet.GenEmptyObj(out ho_BadBox1);
    HOperatorSet.GenEmptyObj(out ho_BadBox2);
    try
    {
      //This procedure explains the parameter 'max_overlap'.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {
        ho_Image.Dispose();
        ho_ImageZoomed.Dispose();
        ho_ImagePart.Dispose();
        ho_ObjectsConcat.Dispose();
        ho_TiledImage.Dispose();
        ho_Line.Dispose();
        ho_BoxGinko.Dispose();
        ho_BoxCapsularumI.Dispose();
        ho_BoxGinko2.Dispose();
        ho_BoxCapsularumI2.Dispose();
        ho_BadBox1.Dispose();
        ho_BadBox2.Dispose();

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_ImageWidth.Dispose();
        hv_ImageHeight.Dispose();
        hv_ImageZoomWidth.Dispose();
        hv_ZoomedImageToImage.Dispose();
        hv_ImageZoomHeight.Dispose();
        hv_ImageRatio.Dispose();
        hv_Ratio.Dispose();
        hv_CropHeight.Dispose();
        hv_CropWidth.Dispose();
        hv_Row1.Dispose();
        hv_Col1.Dispose();
        hv_Row2.Dispose();
        hv_Col2.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_ColorsRainbow.Dispose();
        hv_Colors.Dispose();
        hv_ColorGinko.Dispose();
        hv_ColorCapsularumI.Dispose();
        hv_LineWidth.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_WindowWidth.Dispose();
        hv_WindowHeight.Dispose();
        hv__.Dispose();
        hv_TextWidth.Dispose();
        hv_TextHeight.Dispose();
        hv_TextCol.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 1);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "Output optimization:";
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("Sometimes, the network finds more overlapping bounding");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "boxes predicting the same class for the same object.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "To remove boxes that overlap with the best predicted";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("box by a certain intersection over union (IoU), use");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "the parameter 'max_overlap'.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //
      //Display example image.
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      //
      //Create example image.
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "pill_bag/pill_bag_207.png");
      hv_ImageWidth.Dispose();hv_ImageHeight.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
      hv_ImageZoomWidth.Dispose();
      hv_ImageZoomWidth = 512;
      hv_ZoomedImageToImage.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZoomedImageToImage = hv_ImageZoomWidth/(1.0*hv_ImageWidth);
      }
      hv_ImageZoomHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImageZoomHeight = ((hv_ImageHeight*hv_ZoomedImageToImage)).TupleRound()
          ;
      }
      ho_ImageZoomed.Dispose();
      HOperatorSet.ZoomImageSize(ho_Image, out ho_ImageZoomed, hv_ImageZoomWidth, 
          hv_ImageZoomHeight, "constant");
      //
      hv_ImageRatio.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImageRatio = (hv_ImageWidth.TupleReal()
          )/(hv_ImageHeight.TupleReal());
      }
      hv_Ratio.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Ratio = hv_ImageWidth/(1.0*hv_ImageHeight);
      }
      hv_CropHeight.Dispose();
      hv_CropHeight = 140;
      hv_CropWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CropWidth = hv_Ratio*hv_CropHeight;
      }
      hv_Row1.Dispose();
      hv_Row1 = 17;
      hv_Col1.Dispose();
      hv_Col1 = 335;
      hv_Row2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Row2 = hv_Row1+hv_CropHeight;
      }
      hv_Col2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Col2 = hv_Col1+(hv_CropWidth*0.5);
      }
      ho_ImagePart.Dispose();
      HOperatorSet.CropRectangle1(ho_ImageZoomed, out ho_ImagePart, hv_Row1, hv_Col1, 
          hv_Row2, hv_Col2);
      //
      ho_ObjectsConcat.Dispose();
      HOperatorSet.ConcatObj(ho_ImagePart, ho_ImagePart, out ho_ObjectsConcat);
      ho_TiledImage.Dispose();
      HOperatorSet.TileImages(ho_ObjectsConcat, out ho_TiledImage, 2, "vertical");
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_TiledImage, out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.DispObj(ho_TiledImage, hv_ExpDefaultWinHandle);
      //
      //Make line.
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "gray");
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Line.Dispose();
      HOperatorSet.GenRectangle1(out ho_Line, 0, hv_Width/2, hv_Height, (hv_Width/2)+1);
      }
      //
      //Create result boxes.
      hv_ColorsRainbow.Dispose();
      get_distinct_colors(10, 0, 0, 200, out hv_ColorsRainbow);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleInverse(hv_ColorsRainbow, out ExpTmpOutVar_0);
      hv_ColorsRainbow.Dispose();
      hv_ColorsRainbow = ExpTmpOutVar_0;
      }
      hv_Colors.Dispose();
      make_neighboring_colors_distinguishable(hv_ColorsRainbow, out hv_Colors);
      hv_ColorGinko.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColorGinko = hv_Colors.TupleSelect(
          3);
      }
      hv_ColorCapsularumI.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColorCapsularumI = hv_Colors.TupleSelect(
          7);
      }
      //Result boxes.
      ho_BoxGinko.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxGinko, 30.1, 4.7, 66.2, 91.7);
      ho_BoxCapsularumI.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxCapsularumI, 56.0, 37.0, 119.8, 110.9);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_BoxGinko2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxGinko2, 30.1, 4.7+(hv_Width/2), 66.2, 
          91.7+(hv_Width/2));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_BoxCapsularumI2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxCapsularumI2, 56.0, 37.0+(hv_Width/2), 
          119.8, 110.9+(hv_Width/2));
      }
      //
      //Generate bad box
      ho_BadBox1.Dispose();
      HOperatorSet.GenRectangle1(out ho_BadBox1, 68, 26, 101, 102);
      ho_BadBox2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BadBox2, 49, 63, 119, 95);
      //
      //Draw result box.
      HOperatorSet.DispObj(ho_TiledImage, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Line, hv_ExpDefaultWinHandle);
      hv_LineWidth.Dispose();
      hv_LineWidth = 2.0;
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      display_result_box(ho_BoxGinko, hv_LineWidth, hv_ColorGinko, "4 (1.00)");
      display_result_box(ho_BoxCapsularumI, hv_LineWidth, hv_ColorCapsularumI, "8 (0.97)");
      display_result_box(ho_BoxGinko2, hv_LineWidth, hv_ColorGinko, "4 (1.00)");
      display_result_box(ho_BoxCapsularumI2, hv_LineWidth, hv_ColorCapsularumI, "8 (0.97)");
      display_result_box(ho_BadBox1, hv_LineWidth, hv_ColorCapsularumI, "4 (0.77)");
      display_result_box(ho_BadBox2, hv_LineWidth, hv_ColorCapsularumI, "4 (0.81)");
      //
      //Add text for image parts
      hv_Row.Dispose();hv_Column.Dispose();hv_WindowWidth.Dispose();hv_WindowHeight.Dispose();
      HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_Row, out hv_Column, 
          out hv_WindowWidth, out hv_WindowHeight);
      hv_Text.Dispose();
      hv_Text = "max_overlap = 0.5 (default)";
      hv__.Dispose();hv__.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Text, out hv__, out hv__, 
          out hv_TextWidth, out hv_TextHeight);
      hv_TextCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TextCol = (hv_WindowWidth*0.25)-(hv_TextWidth*0.5);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", hv_WindowHeight-(2*hv_TextHeight), 
          hv_TextCol, "black", new HTuple(), new HTuple());
      }
      hv_Text.Dispose();
      hv_Text = "max_overlap = 0.4";
      hv__.Dispose();hv__.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Text, out hv__, out hv__, 
          out hv_TextWidth, out hv_TextHeight);
      hv_TextCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TextCol = (hv_WindowWidth*0.75)-(hv_TextWidth*0.5);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", hv_WindowHeight-(2*hv_TextHeight), 
          hv_TextCol, "black", new HTuple(), new HTuple());
      }
      //
      //Display.
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.FlushBuffer(hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "true");
      //
      ho_Image.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ObjectsConcat.Dispose();
      ho_TiledImage.Dispose();
      ho_Line.Dispose();
      ho_BoxGinko.Dispose();
      ho_BoxCapsularumI.Dispose();
      ho_BoxGinko2.Dispose();
      ho_BoxCapsularumI2.Dispose();
      ho_BadBox1.Dispose();
      ho_BadBox2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_ImageZoomWidth.Dispose();
      hv_ZoomedImageToImage.Dispose();
      hv_ImageZoomHeight.Dispose();
      hv_ImageRatio.Dispose();
      hv_Ratio.Dispose();
      hv_CropHeight.Dispose();
      hv_CropWidth.Dispose();
      hv_Row1.Dispose();
      hv_Col1.Dispose();
      hv_Row2.Dispose();
      hv_Col2.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ColorsRainbow.Dispose();
      hv_Colors.Dispose();
      hv_ColorGinko.Dispose();
      hv_ColorCapsularumI.Dispose();
      hv_LineWidth.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();
      hv__.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_TextCol.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ObjectsConcat.Dispose();
      ho_TiledImage.Dispose();
      ho_Line.Dispose();
      ho_BoxGinko.Dispose();
      ho_BoxCapsularumI.Dispose();
      ho_BoxGinko2.Dispose();
      ho_BoxCapsularumI2.Dispose();
      ho_BadBox1.Dispose();
      ho_BadBox2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_ImageZoomWidth.Dispose();
      hv_ZoomedImageToImage.Dispose();
      hv_ImageZoomHeight.Dispose();
      hv_ImageRatio.Dispose();
      hv_Ratio.Dispose();
      hv_CropHeight.Dispose();
      hv_CropWidth.Dispose();
      hv_Row1.Dispose();
      hv_Col1.Dispose();
      hv_Row2.Dispose();
      hv_Col2.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ColorsRainbow.Dispose();
      hv_Colors.Dispose();
      hv_ColorGinko.Dispose();
      hv_ColorCapsularumI.Dispose();
      hv_LineWidth.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();
      hv__.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_TextCol.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_max_overlap_class_agnostic (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    HObject ho_Image, ho_ImageZoomed, ho_ImagePart;
    HObject ho_ObjectsConcat, ho_TiledImage, ho_Line, ho_BoxGinko;
    HObject ho_BoxCapsularumI, ho_BoxGinko2, ho_BoxCapsularumI2;
    HObject ho_BadBox1, ho_BadBox2;

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_ImageWidth = new HTuple();
    HTuple hv_ImageHeight = new HTuple(), hv_ImageZoomWidth = new HTuple();
    HTuple hv_ZoomedImageToImage = new HTuple(), hv_ImageZoomHeight = new HTuple();
    HTuple hv_ImageRatio = new HTuple(), hv_Ratio = new HTuple();
    HTuple hv_CropHeight = new HTuple(), hv_CropWidth = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Col1 = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Col2 = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_ColorsRainbow = new HTuple(), hv_Colors = new HTuple();
    HTuple hv_ColorGinko = new HTuple(), hv_ColorCapsularumI = new HTuple();
    HTuple hv_ColorVitaminB = new HTuple(), hv_LineWidth = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_WindowWidth = new HTuple(), hv_WindowHeight = new HTuple();
    HTuple hv__ = new HTuple(), hv_TextWidth = new HTuple();
    HTuple hv_TextHeight = new HTuple(), hv_TextCol = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageZoomed);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    HOperatorSet.GenEmptyObj(out ho_ObjectsConcat);
    HOperatorSet.GenEmptyObj(out ho_TiledImage);
    HOperatorSet.GenEmptyObj(out ho_Line);
    HOperatorSet.GenEmptyObj(out ho_BoxGinko);
    HOperatorSet.GenEmptyObj(out ho_BoxCapsularumI);
    HOperatorSet.GenEmptyObj(out ho_BoxGinko2);
    HOperatorSet.GenEmptyObj(out ho_BoxCapsularumI2);
    HOperatorSet.GenEmptyObj(out ho_BadBox1);
    HOperatorSet.GenEmptyObj(out ho_BadBox2);
    try
    {
      //This procedure explains the parameter 'max_overlap_class_agnostic'.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {
        ho_Image.Dispose();
        ho_ImageZoomed.Dispose();
        ho_ImagePart.Dispose();
        ho_ObjectsConcat.Dispose();
        ho_TiledImage.Dispose();
        ho_Line.Dispose();
        ho_BoxGinko.Dispose();
        ho_BoxCapsularumI.Dispose();
        ho_BoxGinko2.Dispose();
        ho_BoxCapsularumI2.Dispose();
        ho_BadBox1.Dispose();
        ho_BadBox2.Dispose();

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_ImageWidth.Dispose();
        hv_ImageHeight.Dispose();
        hv_ImageZoomWidth.Dispose();
        hv_ZoomedImageToImage.Dispose();
        hv_ImageZoomHeight.Dispose();
        hv_ImageRatio.Dispose();
        hv_Ratio.Dispose();
        hv_CropHeight.Dispose();
        hv_CropWidth.Dispose();
        hv_Row1.Dispose();
        hv_Col1.Dispose();
        hv_Row2.Dispose();
        hv_Col2.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_ColorsRainbow.Dispose();
        hv_Colors.Dispose();
        hv_ColorGinko.Dispose();
        hv_ColorCapsularumI.Dispose();
        hv_ColorVitaminB.Dispose();
        hv_LineWidth.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_WindowWidth.Dispose();
        hv_WindowHeight.Dispose();
        hv__.Dispose();
        hv_TextWidth.Dispose();
        hv_TextHeight.Dispose();
        hv_TextCol.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 1);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "Output optimization:";
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("For the same object, more than one class might be");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("predicted. In this case, the network outputs several");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "bounding boxes with different classes for one object.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "To suppress all overlapping bounding boxes other than";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("the one with the highest confidence,");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("'max_overlap_class_agnostic' can be used. As default,");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "this class agnostic bounding box suppression is not performed.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //
      //Display example image.
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      //
      //Create example image.
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "pill_bag/pill_bag_207.png");
      hv_ImageWidth.Dispose();hv_ImageHeight.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
      hv_ImageZoomWidth.Dispose();
      hv_ImageZoomWidth = 512;
      hv_ZoomedImageToImage.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZoomedImageToImage = hv_ImageZoomWidth/(1.0*hv_ImageWidth);
      }
      hv_ImageZoomHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImageZoomHeight = ((hv_ImageHeight*hv_ZoomedImageToImage)).TupleRound()
          ;
      }
      ho_ImageZoomed.Dispose();
      HOperatorSet.ZoomImageSize(ho_Image, out ho_ImageZoomed, hv_ImageZoomWidth, 
          hv_ImageZoomHeight, "constant");
      //
      hv_ImageRatio.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImageRatio = (hv_ImageWidth.TupleReal()
          )/(hv_ImageHeight.TupleReal());
      }
      hv_Ratio.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Ratio = hv_ImageWidth/(1.0*hv_ImageHeight);
      }
      hv_CropHeight.Dispose();
      hv_CropHeight = 140;
      hv_CropWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CropWidth = hv_Ratio*hv_CropHeight;
      }
      hv_Row1.Dispose();
      hv_Row1 = 17;
      hv_Col1.Dispose();
      hv_Col1 = 335;
      hv_Row2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Row2 = hv_Row1+hv_CropHeight;
      }
      hv_Col2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Col2 = hv_Col1+(hv_CropWidth*0.5);
      }
      ho_ImagePart.Dispose();
      HOperatorSet.CropRectangle1(ho_ImageZoomed, out ho_ImagePart, hv_Row1, hv_Col1, 
          hv_Row2, hv_Col2);
      //
      ho_ObjectsConcat.Dispose();
      HOperatorSet.ConcatObj(ho_ImagePart, ho_ImagePart, out ho_ObjectsConcat);
      ho_TiledImage.Dispose();
      HOperatorSet.TileImages(ho_ObjectsConcat, out ho_TiledImage, 2, "vertical");
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_TiledImage, out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.DispObj(ho_TiledImage, hv_ExpDefaultWinHandle);
      //
      //Make line.
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "gray");
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Line.Dispose();
      HOperatorSet.GenRectangle1(out ho_Line, 0, hv_Width/2, hv_Height, (hv_Width/2)+1);
      }
      //
      //Create result boxes.
      hv_ColorsRainbow.Dispose();
      get_distinct_colors(10, 0, 0, 200, out hv_ColorsRainbow);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleInverse(hv_ColorsRainbow, out ExpTmpOutVar_0);
      hv_ColorsRainbow.Dispose();
      hv_ColorsRainbow = ExpTmpOutVar_0;
      }
      hv_Colors.Dispose();
      make_neighboring_colors_distinguishable(hv_ColorsRainbow, out hv_Colors);
      hv_ColorGinko.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColorGinko = hv_Colors.TupleSelect(
          3);
      }
      hv_ColorCapsularumI.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColorCapsularumI = hv_Colors.TupleSelect(
          7);
      }
      hv_ColorVitaminB.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColorVitaminB = hv_Colors.TupleSelect(
          9);
      }
      //Result boxes.
      ho_BoxGinko.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxGinko, 30.1, 4.7, 66.2, 91.7);
      ho_BoxCapsularumI.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxCapsularumI, 56.0, 37.0, 119.8, 110.9);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_BoxGinko2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxGinko2, 30.1, 4.7+(hv_Width/2), 66.2, 
          91.7+(hv_Width/2));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_BoxCapsularumI2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxCapsularumI2, 56.0, 37.0+(hv_Width/2), 
          119.8, 110.9+(hv_Width/2));
      }
      //
      //Generate bad box
      ho_BadBox1.Dispose();
      HOperatorSet.GenRectangle1(out ho_BadBox1, 25, 3, 61, 88);
      ho_BadBox2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BadBox2, 63, 36, 124, 103);
      //
      //Draw result box.
      HOperatorSet.DispObj(ho_TiledImage, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Line, hv_ExpDefaultWinHandle);
      hv_LineWidth.Dispose();
      hv_LineWidth = 2.0;
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      display_result_box(ho_BoxGinko, hv_LineWidth, hv_ColorGinko, "4 (1.00)");
      display_result_box(ho_BoxCapsularumI, hv_LineWidth, hv_ColorCapsularumI, "8 (0.97)");
      display_result_box(ho_BoxGinko2, hv_LineWidth, hv_ColorGinko, "4 (1.00)");
      display_result_box(ho_BoxCapsularumI2, hv_LineWidth, hv_ColorCapsularumI, "8 (0.97)");
      display_result_box(ho_BadBox1, hv_LineWidth, hv_ColorCapsularumI, "8 (0.82)");
      display_result_box(ho_BadBox2, hv_LineWidth, hv_ColorVitaminB, "9 (0.76)");
      //
      //Add text for image parts
      hv_Row.Dispose();hv_Column.Dispose();hv_WindowWidth.Dispose();hv_WindowHeight.Dispose();
      HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_Row, out hv_Column, 
          out hv_WindowWidth, out hv_WindowHeight);
      hv_Text.Dispose();
      hv_Text = "max_overlap_class_agnostic = 1.0 (default)";
      hv__.Dispose();hv__.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Text, out hv__, out hv__, 
          out hv_TextWidth, out hv_TextHeight);
      hv_TextCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TextCol = (hv_WindowWidth*0.25)-(hv_TextWidth*0.5);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", hv_WindowHeight-(2*hv_TextHeight), 
          hv_TextCol, "black", new HTuple(), new HTuple());
      }
      hv_Text.Dispose();
      hv_Text = "max_overlap_class_agnostic = 0.7";
      hv__.Dispose();hv__.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Text, out hv__, out hv__, 
          out hv_TextWidth, out hv_TextHeight);
      hv_TextCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TextCol = (hv_WindowWidth*0.75)-(hv_TextWidth*0.5);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", hv_WindowHeight-(2*hv_TextHeight), 
          hv_TextCol, "black", new HTuple(), new HTuple());
      }
      //
      //Display.
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.FlushBuffer(hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "true");
      //
      ho_Image.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ObjectsConcat.Dispose();
      ho_TiledImage.Dispose();
      ho_Line.Dispose();
      ho_BoxGinko.Dispose();
      ho_BoxCapsularumI.Dispose();
      ho_BoxGinko2.Dispose();
      ho_BoxCapsularumI2.Dispose();
      ho_BadBox1.Dispose();
      ho_BadBox2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_ImageZoomWidth.Dispose();
      hv_ZoomedImageToImage.Dispose();
      hv_ImageZoomHeight.Dispose();
      hv_ImageRatio.Dispose();
      hv_Ratio.Dispose();
      hv_CropHeight.Dispose();
      hv_CropWidth.Dispose();
      hv_Row1.Dispose();
      hv_Col1.Dispose();
      hv_Row2.Dispose();
      hv_Col2.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ColorsRainbow.Dispose();
      hv_Colors.Dispose();
      hv_ColorGinko.Dispose();
      hv_ColorCapsularumI.Dispose();
      hv_ColorVitaminB.Dispose();
      hv_LineWidth.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();
      hv__.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_TextCol.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ObjectsConcat.Dispose();
      ho_TiledImage.Dispose();
      ho_Line.Dispose();
      ho_BoxGinko.Dispose();
      ho_BoxCapsularumI.Dispose();
      ho_BoxGinko2.Dispose();
      ho_BoxCapsularumI2.Dispose();
      ho_BadBox1.Dispose();
      ho_BadBox2.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_ImageZoomWidth.Dispose();
      hv_ZoomedImageToImage.Dispose();
      hv_ImageZoomHeight.Dispose();
      hv_ImageRatio.Dispose();
      hv_Ratio.Dispose();
      hv_CropHeight.Dispose();
      hv_CropWidth.Dispose();
      hv_Row1.Dispose();
      hv_Col1.Dispose();
      hv_Row2.Dispose();
      hv_Col2.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ColorsRainbow.Dispose();
      hv_Colors.Dispose();
      hv_ColorGinko.Dispose();
      hv_ColorCapsularumI.Dispose();
      hv_ColorVitaminB.Dispose();
      hv_LineWidth.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();
      hv__.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_TextCol.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_min_confidence (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    HObject ho_Image, ho_ImageZoomed, ho_ImagePart;
    HObject ho_ObjectsConcat, ho_TiledImage, ho_Line, ho_BoxGinko;
    HObject ho_BoxCapsularumI, ho_BoxGinko2, ho_BoxCapsularumI2;
    HObject ho_BadBox;

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    HTuple hv_WindowHandleImages = new HTuple(), hv_ImageWidth = new HTuple();
    HTuple hv_ImageHeight = new HTuple(), hv_ImageZoomWidth = new HTuple();
    HTuple hv_ZoomedImageToImage = new HTuple(), hv_ImageZoomHeight = new HTuple();
    HTuple hv_ImageRatio = new HTuple(), hv_Ratio = new HTuple();
    HTuple hv_CropHeight = new HTuple(), hv_CropWidth = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Col1 = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Col2 = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_ColorsRainbow = new HTuple(), hv_Colors = new HTuple();
    HTuple hv_ColorGinko = new HTuple(), hv_ColorCapsularumI = new HTuple();
    HTuple hv_LineWidth = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = new HTuple(), hv__ = new HTuple();
    HTuple hv_TextWidth = new HTuple(), hv_TextHeight = new HTuple();
    HTuple hv_TextCol = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageZoomed);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    HOperatorSet.GenEmptyObj(out ho_ObjectsConcat);
    HOperatorSet.GenEmptyObj(out ho_TiledImage);
    HOperatorSet.GenEmptyObj(out ho_Line);
    HOperatorSet.GenEmptyObj(out ho_BoxGinko);
    HOperatorSet.GenEmptyObj(out ho_BoxCapsularumI);
    HOperatorSet.GenEmptyObj(out ho_BoxGinko2);
    HOperatorSet.GenEmptyObj(out ho_BoxCapsularumI2);
    HOperatorSet.GenEmptyObj(out ho_BadBox);
    try
    {
      //This procedure explains the parameter 'min_confidence'.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {
        ho_Image.Dispose();
        ho_ImageZoomed.Dispose();
        ho_ImagePart.Dispose();
        ho_ObjectsConcat.Dispose();
        ho_TiledImage.Dispose();
        ho_Line.Dispose();
        ho_BoxGinko.Dispose();
        ho_BoxCapsularumI.Dispose();
        ho_BoxGinko2.Dispose();
        ho_BoxCapsularumI2.Dispose();
        ho_BadBox.Dispose();

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();
        hv_WindowHandleImages.Dispose();
        hv_ImageWidth.Dispose();
        hv_ImageHeight.Dispose();
        hv_ImageZoomWidth.Dispose();
        hv_ZoomedImageToImage.Dispose();
        hv_ImageZoomHeight.Dispose();
        hv_ImageRatio.Dispose();
        hv_Ratio.Dispose();
        hv_CropHeight.Dispose();
        hv_CropWidth.Dispose();
        hv_Row1.Dispose();
        hv_Col1.Dispose();
        hv_Row2.Dispose();
        hv_Col2.Dispose();
        hv_Width.Dispose();
        hv_Height.Dispose();
        hv_ColorsRainbow.Dispose();
        hv_Colors.Dispose();
        hv_ColorGinko.Dispose();
        hv_ColorCapsularumI.Dispose();
        hv_LineWidth.Dispose();
        hv_Row.Dispose();
        hv_Column.Dispose();
        hv_WindowWidth.Dispose();
        hv_WindowHeight.Dispose();
        hv__.Dispose();
        hv_TextWidth.Dispose();
        hv_TextHeight.Dispose();
        hv_TextCol.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 1);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "Output optimization:";
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "The output of 'apply_dl_model' can be optimized with";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "some parameters that can be set with 'set_dl_model_param'.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("To suppress result bounding boxes with a low confidence, use");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "the parameter 'min_confidence'.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //
      //Display example image.
      hv_WindowHandleImages.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images", out hv_WindowHandleImages);
      //dev_set_window(...);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      //
      //Create example image.
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "pill_bag/pill_bag_207.png");
      hv_ImageWidth.Dispose();hv_ImageHeight.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
      hv_ImageZoomWidth.Dispose();
      hv_ImageZoomWidth = 512;
      hv_ZoomedImageToImage.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZoomedImageToImage = hv_ImageZoomWidth/(1.0*hv_ImageWidth);
      }
      hv_ImageZoomHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImageZoomHeight = ((hv_ImageHeight*hv_ZoomedImageToImage)).TupleRound()
          ;
      }
      ho_ImageZoomed.Dispose();
      HOperatorSet.ZoomImageSize(ho_Image, out ho_ImageZoomed, hv_ImageZoomWidth, 
          hv_ImageZoomHeight, "constant");
      //
      hv_ImageRatio.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ImageRatio = (hv_ImageWidth.TupleReal()
          )/(hv_ImageHeight.TupleReal());
      }
      hv_Ratio.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Ratio = hv_ImageWidth/(1.0*hv_ImageHeight);
      }
      hv_CropHeight.Dispose();
      hv_CropHeight = 140;
      hv_CropWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CropWidth = hv_Ratio*hv_CropHeight;
      }
      hv_Row1.Dispose();
      hv_Row1 = 17;
      hv_Col1.Dispose();
      hv_Col1 = 335;
      hv_Row2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Row2 = hv_Row1+hv_CropHeight;
      }
      hv_Col2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Col2 = hv_Col1+(hv_CropWidth*0.5);
      }
      ho_ImagePart.Dispose();
      HOperatorSet.CropRectangle1(ho_ImageZoomed, out ho_ImagePart, hv_Row1, hv_Col1, 
          hv_Row2, hv_Col2);
      //
      ho_ObjectsConcat.Dispose();
      HOperatorSet.ConcatObj(ho_ImagePart, ho_ImagePart, out ho_ObjectsConcat);
      ho_TiledImage.Dispose();
      HOperatorSet.TileImages(ho_ObjectsConcat, out ho_TiledImage, 2, "vertical");
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_TiledImage, out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.DispObj(ho_TiledImage, hv_ExpDefaultWinHandle);
      //
      //Make line.
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "gray");
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Line.Dispose();
      HOperatorSet.GenRectangle1(out ho_Line, 0, hv_Width/2, hv_Height, (hv_Width/2)+1);
      }
      //
      //Create result boxes.
      hv_ColorsRainbow.Dispose();
      get_distinct_colors(10, 0, 0, 200, out hv_ColorsRainbow);
      {
      HTuple ExpTmpOutVar_0;
      HOperatorSet.TupleInverse(hv_ColorsRainbow, out ExpTmpOutVar_0);
      hv_ColorsRainbow.Dispose();
      hv_ColorsRainbow = ExpTmpOutVar_0;
      }
      hv_Colors.Dispose();
      make_neighboring_colors_distinguishable(hv_ColorsRainbow, out hv_Colors);
      hv_ColorGinko.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColorGinko = hv_Colors.TupleSelect(
          3);
      }
      hv_ColorCapsularumI.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColorCapsularumI = hv_Colors.TupleSelect(
          7);
      }
      //Result boxes.
      ho_BoxGinko.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxGinko, 30.1, 4.7, 66.2, 91.7);
      ho_BoxCapsularumI.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxCapsularumI, 56.0, 37.0, 119.8, 110.9);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_BoxGinko2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxGinko2, 30.1, 4.7+(hv_Width/2), 66.2, 
          91.7+(hv_Width/2));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_BoxCapsularumI2.Dispose();
      HOperatorSet.GenRectangle1(out ho_BoxCapsularumI2, 56.0, 37.0+(hv_Width/2), 
          119.8, 110.9+(hv_Width/2));
      }
      //
      //Generate bad box
      ho_BadBox.Dispose();
      HOperatorSet.GenRectangle1(out ho_BadBox, 40, 49, 92, 105);
      //
      //Draw result box.
      HOperatorSet.DispObj(ho_TiledImage, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Line, hv_ExpDefaultWinHandle);
      hv_LineWidth.Dispose();
      hv_LineWidth = 2.0;
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "false");
      display_result_box(ho_BoxGinko, hv_LineWidth, hv_ColorGinko, "4 (1.00)");
      display_result_box(ho_BoxCapsularumI, hv_LineWidth, hv_ColorCapsularumI, "8 (0.97)");
      display_result_box(ho_BoxGinko2, hv_LineWidth, hv_ColorGinko, "4 (1.00)");
      display_result_box(ho_BoxCapsularumI2, hv_LineWidth, hv_ColorCapsularumI, "8 (0.97)");
      display_result_box(ho_BadBox, hv_LineWidth, hv_ColorGinko, "4 (0.55)");
      //
      //Add text for image parts
      hv_Row.Dispose();hv_Column.Dispose();hv_WindowWidth.Dispose();hv_WindowHeight.Dispose();
      HOperatorSet.GetWindowExtents(hv_ExpDefaultWinHandle, out hv_Row, out hv_Column, 
          out hv_WindowWidth, out hv_WindowHeight);
      hv_Text.Dispose();
      hv_Text = "min_confidence = 0.5 (default)";
      hv__.Dispose();hv__.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Text, out hv__, out hv__, 
          out hv_TextWidth, out hv_TextHeight);
      hv_TextCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TextCol = (hv_WindowWidth*0.25)-(hv_TextWidth*0.5);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", hv_WindowHeight-(2*hv_TextHeight), 
          hv_TextCol, "black", new HTuple(), new HTuple());
      }
      hv_Text.Dispose();
      hv_Text = "min_confidence = 0.6";
      hv__.Dispose();hv__.Dispose();hv_TextWidth.Dispose();hv_TextHeight.Dispose();
      HOperatorSet.GetStringExtents(hv_ExpDefaultWinHandle, hv_Text, out hv__, out hv__, 
          out hv_TextWidth, out hv_TextHeight);
      hv_TextCol.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TextCol = (hv_WindowWidth*0.75)-(hv_TextWidth*0.5);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", hv_WindowHeight-(2*hv_TextHeight), 
          hv_TextCol, "black", new HTuple(), new HTuple());
      }
      //
      //Display.
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_Height-1, hv_Width-1);
      }
      HOperatorSet.FlushBuffer(hv_ExpDefaultWinHandle);
      HOperatorSet.SetWindowParam(hv_ExpDefaultWinHandle, "flush", "true");
      //
      ho_Image.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ObjectsConcat.Dispose();
      ho_TiledImage.Dispose();
      ho_Line.Dispose();
      ho_BoxGinko.Dispose();
      ho_BoxCapsularumI.Dispose();
      ho_BoxGinko2.Dispose();
      ho_BoxCapsularumI2.Dispose();
      ho_BadBox.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_ImageZoomWidth.Dispose();
      hv_ZoomedImageToImage.Dispose();
      hv_ImageZoomHeight.Dispose();
      hv_ImageRatio.Dispose();
      hv_Ratio.Dispose();
      hv_CropHeight.Dispose();
      hv_CropWidth.Dispose();
      hv_Row1.Dispose();
      hv_Col1.Dispose();
      hv_Row2.Dispose();
      hv_Col2.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ColorsRainbow.Dispose();
      hv_Colors.Dispose();
      hv_ColorGinko.Dispose();
      hv_ColorCapsularumI.Dispose();
      hv_LineWidth.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();
      hv__.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_TextCol.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_ImageZoomed.Dispose();
      ho_ImagePart.Dispose();
      ho_ObjectsConcat.Dispose();
      ho_TiledImage.Dispose();
      ho_Line.Dispose();
      ho_BoxGinko.Dispose();
      ho_BoxCapsularumI.Dispose();
      ho_BoxGinko2.Dispose();
      ho_BoxCapsularumI2.Dispose();
      ho_BadBox.Dispose();

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();
      hv_WindowHandleImages.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_ImageZoomWidth.Dispose();
      hv_ZoomedImageToImage.Dispose();
      hv_ImageZoomHeight.Dispose();
      hv_ImageRatio.Dispose();
      hv_Ratio.Dispose();
      hv_CropHeight.Dispose();
      hv_CropWidth.Dispose();
      hv_Row1.Dispose();
      hv_Col1.Dispose();
      hv_Row2.Dispose();
      hv_Col2.Dispose();
      hv_Width.Dispose();
      hv_Height.Dispose();
      hv_ColorsRainbow.Dispose();
      hv_Colors.Dispose();
      hv_ColorGinko.Dispose();
      hv_ColorCapsularumI.Dispose();
      hv_LineWidth.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();
      hv__.Dispose();
      hv_TextWidth.Dispose();
      hv_TextHeight.Dispose();
      hv_TextCol.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_display_screen_run_program (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ShowExampleScreens = new HTuple();
    HTuple hv_WindowHandleText = new HTuple(), hv_Text = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure shows a final text before running the program.
      //
      hv_ShowExampleScreens.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "show_example_screens", out hv_ShowExampleScreens);
      if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
      {

        hv_ShowExampleScreens.Dispose();
        hv_WindowHandleText.Dispose();
        hv_Text.Dispose();

        return;
      }
      //
      //Reset the open windows for a clean display.
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 0);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
      dev_display_example_reset_windows(hv_ExampleInternals);
      //
      //Display explanatory text.
      hv_WindowHandleText.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_text", out hv_WindowHandleText);
      //dev_set_window(...);
      //
      hv_Text.Dispose();
      hv_Text = "We will now apply the trained model from example part 2";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "'detect_pills_deep_learning_2_train.hdev'";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "to some new images using 'apply_dl_model'.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("In the consequent example application, it is checked");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = new HTuple("if the bags have been filled up correctly, which means:");
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "- The bag contains all pill types.";
      if (hv_Text == null)
        hv_Text = new HTuple();
      hv_Text[new HTuple(hv_Text.TupleLength())] = "- There are no duplicates in the bag.";
      //
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "window", "top", "left", 
          "black", "box", "true");
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, "Press Run (F5) to continue", 
          "window", "bottom", "right", "black", new HTuple(), new HTuple());
      //

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ShowExampleScreens.Dispose();
      hv_WindowHandleText.Dispose();
      hv_Text.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_example_init (HTuple hv_ShowExampleScreens, HTuple hv_UsePretrainedModel, 
      out HTuple hv_ExampleInternals)
  {


    // Initialize local and output iconic variables 
    hv_ExampleInternals = new HTuple();
    //This procedure initializes the graphic windows that are used for explanations during the example.
    //
    //A dict that will be used/adapted by other example procedures.
    hv_ExampleInternals.Dispose();
    HOperatorSet.CreateDict(out hv_ExampleInternals);
    HOperatorSet.SetDictTuple(hv_ExampleInternals, "show_example_screens", hv_ShowExampleScreens);
    HOperatorSet.SetDictTuple(hv_ExampleInternals, "use_pretrained_model", hv_UsePretrainedModel);
    if ((int)(hv_ShowExampleScreens.TupleNot()) != 0)
    {


      return;
    }
    //
    //dev_close_window(...);
    dev_open_example_text_window(hv_ExampleInternals);
    //
    HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_needed", 0);
    HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend_needed", 0);
    //


    return;
  }

  public void dev_open_example_image_window (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_WindowHeightText = new HTuple();
    HTuple hv_WindowWidthImage = new HTuple(), hv_WindowHeightImages = new HTuple();
    HTuple hv_WindowBGColor = new HTuple(), hv_WindowYImages = new HTuple();
    HTuple hv_WindowXImages = new HTuple(), hv_WindowHandleImages = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure initializes the graphic windows that are used to display example images.
      //
      hv_WindowHeightText.Dispose();
      hv_WindowHeightText = 300;
      hv_WindowWidthImage.Dispose();
      hv_WindowWidthImage = 800;
      hv_WindowHeightImages.Dispose();
      hv_WindowHeightImages = 500;
      hv_WindowBGColor.Dispose();
      hv_WindowBGColor = "gray";
      //
      hv_WindowYImages.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_WindowYImages = hv_WindowHeightText+60;
      }
      hv_WindowXImages.Dispose();
      hv_WindowXImages = 0;
      //dev_open_window(...);
      set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images", hv_WindowHandleImages);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_width", hv_WindowWidthImage);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_height", hv_WindowHeightImages);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_x", hv_WindowXImages);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_images_y", hv_WindowYImages);

      hv_WindowHeightText.Dispose();
      hv_WindowWidthImage.Dispose();
      hv_WindowHeightImages.Dispose();
      hv_WindowBGColor.Dispose();
      hv_WindowYImages.Dispose();
      hv_WindowXImages.Dispose();
      hv_WindowHandleImages.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowHeightText.Dispose();
      hv_WindowWidthImage.Dispose();
      hv_WindowHeightImages.Dispose();
      hv_WindowBGColor.Dispose();
      hv_WindowYImages.Dispose();
      hv_WindowXImages.Dispose();
      hv_WindowHandleImages.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_open_example_legend_window (HTuple hv_ExampleInternals, HTuple hv_WindowWidth)
  {



    // Local control variables 

    HTuple hv_WindowImagesHeight = new HTuple();
    HTuple hv_WindowImagesWidth = new HTuple(), hv_WindowImagesX = new HTuple();
    HTuple hv_WindowImagesY = new HTuple(), hv_WindowHandleLegend = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This procedure initializes the graphic windows that are used to display a legend.
      //
      hv_WindowImagesHeight.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_height", out hv_WindowImagesHeight);
      hv_WindowImagesWidth.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_width", out hv_WindowImagesWidth);
      hv_WindowImagesX.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_x", out hv_WindowImagesX);
      hv_WindowImagesY.Dispose();
      HOperatorSet.GetDictTuple(hv_ExampleInternals, "window_images_y", out hv_WindowImagesY);
      //dev_open_window(...);
      set_display_font(hv_ExpDefaultWinHandle, 14, "mono", "true", "false");
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_legend", hv_WindowHandleLegend);

      hv_WindowImagesHeight.Dispose();
      hv_WindowImagesWidth.Dispose();
      hv_WindowImagesX.Dispose();
      hv_WindowImagesY.Dispose();
      hv_WindowHandleLegend.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowImagesHeight.Dispose();
      hv_WindowImagesWidth.Dispose();
      hv_WindowImagesX.Dispose();
      hv_WindowImagesY.Dispose();
      hv_WindowHandleLegend.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void dev_open_example_text_window (HTuple hv_ExampleInternals)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_WindowWidthText = new HTuple(), hv_WindowHeightText = new HTuple();
    HTuple hv_WindowBGColor = new HTuple(), hv_WindowHandleText = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      hv_WindowWidthText.Dispose();
      hv_WindowWidthText = 800;
      hv_WindowHeightText.Dispose();
      hv_WindowHeightText = 300;
      hv_WindowBGColor.Dispose();
      hv_WindowBGColor = "gray";
      //dev_open_window(...);
      set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_text", hv_WindowHandleText);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_text_width", hv_WindowWidthText);
      HOperatorSet.SetDictTuple(hv_ExampleInternals, "window_text_height", hv_WindowHeightText);

      hv_WindowWidthText.Dispose();
      hv_WindowHeightText.Dispose();
      hv_WindowBGColor.Dispose();
      hv_WindowHandleText.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_WindowWidthText.Dispose();
      hv_WindowHeightText.Dispose();
      hv_WindowBGColor.Dispose();
      hv_WindowHandleText.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void display_result_box (HObject ho_Box, HTuple hv_LineWidth, HTuple hv_Colors, 
      HTuple hv_Text)
  {




    // Local control variables 

    HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    // Initialize local and output iconic variables 
    try
    {
      //This helper procedure displays result bounding boxes.
      //
      //Draw result box.
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, ((hv_LineWidth+2)).TupleInt()
          );
      }
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "black");
      HOperatorSet.DispObj(ho_Box, hv_ExpDefaultWinHandle);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, hv_LineWidth.TupleInt());
      }
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, hv_Colors);
      HOperatorSet.DispObj(ho_Box, hv_ExpDefaultWinHandle);
      //Display text.
      hv_Row1.Dispose();hv_Column1.Dispose();hv_Row2.Dispose();hv_Column2.Dispose();
      HOperatorSet.SmallestRectangle1(ho_Box, out hv_Row1, out hv_Column1, out hv_Row2, 
          out hv_Column2);
      HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_Text, "image", hv_Row1, hv_Column1, 
          "white", ((new HTuple("box_color")).TupleConcat("shadow")).TupleConcat(
          "border_radius"), ((new HTuple("black")).TupleConcat("false")).TupleConcat(
          0));

      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_Row2.Dispose();
      hv_Column2.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_Row2.Dispose();
      hv_Column2.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Short Description: Generates NumColors distinct colors 
  public void get_distinct_colors (HTuple hv_NumColors, HTuple hv_Random, HTuple hv_StartColor, 
      HTuple hv_EndColor, out HTuple hv_Colors)
  {



      // Local iconic variables 

      HObject ho_HLSImageH, ho_HLSImageL, ho_HLSImageS;
      HObject ho_ImageR, ho_ImageG, ho_ImageB;

      // Local control variables 

      HTuple hv_IsString = new HTuple(), hv_Hue = new HTuple();
      HTuple hv_Lightness = new HTuple(), hv_Saturation = new HTuple();
      HTuple hv_Rows = new HTuple(), hv_Columns = new HTuple();
      HTuple hv_Red = new HTuple(), hv_Green = new HTuple();
      HTuple hv_Blue = new HTuple();
      HTuple   hv_EndColor_COPY_INP_TMP = new HTuple(hv_EndColor);
      HTuple   hv_Random_COPY_INP_TMP = new HTuple(hv_Random);

      // Initialize local and output iconic variables 
      HOperatorSet.GenEmptyObj(out ho_HLSImageH);
      HOperatorSet.GenEmptyObj(out ho_HLSImageL);
      HOperatorSet.GenEmptyObj(out ho_HLSImageS);
      HOperatorSet.GenEmptyObj(out ho_ImageR);
      HOperatorSet.GenEmptyObj(out ho_ImageG);
      HOperatorSet.GenEmptyObj(out ho_ImageB);
      hv_Colors = new HTuple();
      try
      {
      //
      //We get distinct color-values first in HLS color-space.
      //Assumes hue [0, EndColor), lightness [0, 1), saturation [0, 1).
      //
      //Parameter checks.
      //NumColors.
      if ((int)(new HTuple(hv_NumColors.TupleLess(1))) != 0)
      {
        throw new HalconException("NumColors should be at least 1");
      }
      if ((int)(((hv_NumColors.TupleIsInt())).TupleNot()) != 0)
      {
        throw new HalconException("NumColors should be of type int");
      }
      if ((int)(new HTuple((new HTuple(hv_NumColors.TupleLength())).TupleNotEqual(
          1))) != 0)
      {
        throw new HalconException("NumColors should have length 1");
      }
      //Random.
      if ((int)((new HTuple(hv_Random_COPY_INP_TMP.TupleNotEqual(0))).TupleAnd(new HTuple(hv_Random_COPY_INP_TMP.TupleNotEqual(
          1)))) != 0)
      {
        hv_IsString.Dispose();
        HOperatorSet.TupleIsString(hv_Random_COPY_INP_TMP, out hv_IsString);
        if ((int)(hv_IsString) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Random = (new HTuple(hv_Random_COPY_INP_TMP.TupleEqual(
              "true"))).TupleOr("false");
          hv_Random_COPY_INP_TMP.Dispose();
          hv_Random_COPY_INP_TMP = ExpTmpLocalVar_Random;
          }
          }
        }
        else
        {
          throw new HalconException("Random should be either true or false");
        }
      }
      //StartColor.
      if ((int)(new HTuple((new HTuple(hv_StartColor.TupleLength())).TupleNotEqual(
          1))) != 0)
      {
        throw new HalconException("StartColor should have length 1");
      }
      if ((int)((new HTuple(hv_StartColor.TupleLess(0))).TupleOr(new HTuple(hv_StartColor.TupleGreater(
          255)))) != 0)
      {
        throw new HalconException(new HTuple("StartColor should be in the range [0, 255]"));
      }
      if ((int)(((hv_StartColor.TupleIsInt())).TupleNot()) != 0)
      {
        throw new HalconException("StartColor should be of type int");
      }
      //EndColor.
      if ((int)(new HTuple((new HTuple(hv_EndColor_COPY_INP_TMP.TupleLength())).TupleNotEqual(
          1))) != 0)
      {
        throw new HalconException("EndColor should have length 1");
      }
      if ((int)((new HTuple(hv_EndColor_COPY_INP_TMP.TupleLess(0))).TupleOr(new HTuple(hv_EndColor_COPY_INP_TMP.TupleGreater(
          255)))) != 0)
      {
        throw new HalconException(new HTuple("EndColor should be in the range [0, 255]"));
      }
      if ((int)(((hv_EndColor_COPY_INP_TMP.TupleIsInt())).TupleNot()) != 0)
      {
        throw new HalconException("EndColor should be of type int");
      }
      //
      //Color generation.
      if ((int)(new HTuple(hv_StartColor.TupleGreater(hv_EndColor_COPY_INP_TMP))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_EndColor = hv_EndColor_COPY_INP_TMP+255;
        hv_EndColor_COPY_INP_TMP.Dispose();
        hv_EndColor_COPY_INP_TMP = ExpTmpLocalVar_EndColor;
        }
        }
      }
      if ((int)(new HTuple(hv_NumColors.TupleNotEqual(1))) != 0)
      {
        hv_Hue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Hue = (hv_StartColor+(((((hv_EndColor_COPY_INP_TMP-hv_StartColor)*((HTuple.TupleGenSequence(
            0,hv_NumColors-1,1)).TupleReal()))/(((hv_NumColors-1)).TupleReal()))).TupleInt()
            ))%255;
        }
      }
      else
      {
        hv_Hue.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Hue = ((hv_StartColor.TupleConcat(
            hv_EndColor_COPY_INP_TMP))).TupleMean();
        }
      }
      if ((int)(hv_Random_COPY_INP_TMP) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_Hue = hv_Hue.TupleSelect(
            (HTuple.TupleRand(hv_NumColors)).TupleSortIndex());
        hv_Hue.Dispose();
        hv_Hue = ExpTmpLocalVar_Hue;
        }
        }
        hv_Lightness.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Lightness = ((((5.0+HTuple.TupleRand(
            hv_NumColors))*255.0)/10.0)).TupleInt();
        }
        hv_Saturation.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Saturation = ((((9.0+HTuple.TupleRand(
            hv_NumColors))*255.0)/10.0)).TupleInt();
        }
      }
      else
      {
        hv_Lightness.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Lightness = ((HTuple.TupleGenConst(
            hv_NumColors,0.55)*255.0)).TupleInt();
        }
        hv_Saturation.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Saturation = ((HTuple.TupleGenConst(
            hv_NumColors,0.95)*255.0)).TupleInt();
        }
      }
      //
      //Write colors to a 3-channel image in order to transform easier.
      ho_HLSImageH.Dispose();
      HOperatorSet.GenImageConst(out ho_HLSImageH, "byte", 1, hv_NumColors);
      ho_HLSImageL.Dispose();
      HOperatorSet.GenImageConst(out ho_HLSImageL, "byte", 1, hv_NumColors);
      ho_HLSImageS.Dispose();
      HOperatorSet.GenImageConst(out ho_HLSImageS, "byte", 1, hv_NumColors);
      hv_Rows.Dispose();hv_Columns.Dispose();
      HOperatorSet.GetRegionPoints(ho_HLSImageH, out hv_Rows, out hv_Columns);
      HOperatorSet.SetGrayval(ho_HLSImageH, hv_Rows, hv_Columns, hv_Hue);
      HOperatorSet.SetGrayval(ho_HLSImageL, hv_Rows, hv_Columns, hv_Lightness);
      HOperatorSet.SetGrayval(ho_HLSImageS, hv_Rows, hv_Columns, hv_Saturation);
      //
      //Convert from HLS to RGB.
      ho_ImageR.Dispose();ho_ImageG.Dispose();ho_ImageB.Dispose();
      HOperatorSet.TransToRgb(ho_HLSImageH, ho_HLSImageL, ho_HLSImageS, out ho_ImageR, 
          out ho_ImageG, out ho_ImageB, "hls");
      //
      //Get RGB-values and transform to Hex.
      hv_Red.Dispose();
      HOperatorSet.GetGrayval(ho_ImageR, hv_Rows, hv_Columns, out hv_Red);
      hv_Green.Dispose();
      HOperatorSet.GetGrayval(ho_ImageG, hv_Rows, hv_Columns, out hv_Green);
      hv_Blue.Dispose();
      HOperatorSet.GetGrayval(ho_ImageB, hv_Rows, hv_Columns, out hv_Blue);
      hv_Colors.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Colors = (("#"+(hv_Red.TupleString(
          "02x")))+(hv_Green.TupleString("02x")))+(hv_Blue.TupleString("02x"));
      }
      ho_HLSImageH.Dispose();
      ho_HLSImageL.Dispose();
      ho_HLSImageS.Dispose();
      ho_ImageR.Dispose();
      ho_ImageG.Dispose();
      ho_ImageB.Dispose();

      hv_EndColor_COPY_INP_TMP.Dispose();
      hv_Random_COPY_INP_TMP.Dispose();
      hv_IsString.Dispose();
      hv_Hue.Dispose();
      hv_Lightness.Dispose();
      hv_Saturation.Dispose();
      hv_Rows.Dispose();
      hv_Columns.Dispose();
      hv_Red.Dispose();
      hv_Green.Dispose();
      hv_Blue.Dispose();

      return;

    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_HLSImageH.Dispose();
      ho_HLSImageL.Dispose();
      ho_HLSImageS.Dispose();
      ho_ImageR.Dispose();
      ho_ImageG.Dispose();
      ho_ImageB.Dispose();

      hv_EndColor_COPY_INP_TMP.Dispose();
      hv_Random_COPY_INP_TMP.Dispose();
      hv_IsString.Dispose();
      hv_Hue.Dispose();
      hv_Lightness.Dispose();
      hv_Saturation.Dispose();
      hv_Rows.Dispose();
      hv_Columns.Dispose();
      hv_Red.Dispose();
      hv_Green.Dispose();
      hv_Blue.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void get_example_inference_images (HTuple hv_ImageDir, out HTuple hv_ImageFiles)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_NumSamples = new HTuple(), hv_ImageFilesIndices = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    hv_ImageFiles = new HTuple();
    try
    {
      //This procedure creates a list of images used for this example.
      //
      hv_NumSamples.Dispose();
      hv_NumSamples = 10;
      hv_ImageFiles.Dispose();
      HOperatorSet.TupleGenConst(hv_NumSamples, "", out hv_ImageFiles);
      //
      //bags containing all pills.
      hv_ImageFilesIndices.Dispose();
      hv_ImageFilesIndices = new HTuple();
      hv_ImageFilesIndices[0] = 152;
      hv_ImageFilesIndices[1] = 41;
      hv_ImageFilesIndices[2] = 164;
      hv_ImageFilesIndices[3] = 49;
      //bags containing only duplicates.
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ImageFilesIndices = hv_ImageFilesIndices.TupleConcat(
          (new HTuple(121)).TupleConcat(59));
      hv_ImageFilesIndices.Dispose();
      hv_ImageFilesIndices = ExpTmpLocalVar_ImageFilesIndices;
      }
      }
      //bags containing only missing pills.
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ImageFilesIndices = hv_ImageFilesIndices.TupleConcat(
          (new HTuple(178)).TupleConcat(18));
      hv_ImageFilesIndices.Dispose();
      hv_ImageFilesIndices = ExpTmpLocalVar_ImageFilesIndices;
      }
      }
      //bags containing both, duplicates and missing pills
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ImageFilesIndices = hv_ImageFilesIndices.TupleConcat(
          (new HTuple(146)).TupleConcat(294));
      hv_ImageFilesIndices.Dispose();
      hv_ImageFilesIndices = ExpTmpLocalVar_ImageFilesIndices;
      }
      }
      //
      HTuple end_val14 = hv_NumSamples-1;
      HTuple step_val14 = 1;
      for (hv_Index=0; hv_Index.Continue(end_val14, step_val14); hv_Index = hv_Index.TupleAdd(step_val14))
      {
        if (hv_ImageFiles == null)
          hv_ImageFiles = new HTuple();
        hv_ImageFiles[hv_Index] = ((hv_ImageDir+"/pill_bag_")+(((hv_ImageFilesIndices.TupleSelect(
            hv_Index))).TupleString("03")))+".png";
      }
      //
      {
      HTuple ExpTmpOutVar_0;
      tuple_shuffle(hv_ImageFiles, out ExpTmpOutVar_0);
      hv_ImageFiles.Dispose();
      hv_ImageFiles = ExpTmpOutVar_0;
      }
      //

      hv_NumSamples.Dispose();
      hv_ImageFilesIndices.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_NumSamples.Dispose();
      hv_ImageFilesIndices.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Short Description: shuffles the input colors in a deterministic way 
  public void make_neighboring_colors_distinguishable (HTuple hv_ColorsRainbow, out HTuple hv_Colors)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_NumColors = new HTuple(), hv_NumChunks = new HTuple();
    HTuple hv_NumLeftOver = new HTuple(), hv_ColorsPerChunk = new HTuple();
    HTuple hv_StartIdx = new HTuple(), hv_S = new HTuple();
    HTuple hv_EndIdx = new HTuple(), hv_IdxsLeft = new HTuple();
    HTuple hv_IdxsRight = new HTuple();
    // Initialize local and output iconic variables 
    hv_Colors = new HTuple();
    try
    {
      //Shuffle the input colors in a deterministic way
      //to make adjacent colors more distinguishable.
      //Neighboring colors from the input are distributed to every NumChunks
      //position in the output.
      //Depending on the number of colors, increase NumChunks.
      hv_NumColors.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_NumColors = new HTuple(hv_ColorsRainbow.TupleLength()
          );
      }
      if ((int)(new HTuple(hv_NumColors.TupleGreaterEqual(8))) != 0)
      {
        hv_NumChunks.Dispose();
        hv_NumChunks = 3;
        if ((int)(new HTuple(hv_NumColors.TupleGreaterEqual(40))) != 0)
        {
          hv_NumChunks.Dispose();
          hv_NumChunks = 6;
        }
        else if ((int)(new HTuple(hv_NumColors.TupleGreaterEqual(20))) != 0)
        {
          hv_NumChunks.Dispose();
          hv_NumChunks = 4;
        }
        hv_Colors.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Colors = HTuple.TupleGenConst(
            hv_NumColors,-1);
        }
        //Check if the Number of Colors is dividable by NumChunks.
        hv_NumLeftOver.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_NumLeftOver = hv_NumColors%hv_NumChunks;
        }
        hv_ColorsPerChunk.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ColorsPerChunk = ((hv_NumColors/hv_NumChunks)).TupleInt()
            ;
        }
        hv_StartIdx.Dispose();
        hv_StartIdx = 0;
        HTuple end_val18 = hv_NumChunks-1;
        HTuple step_val18 = 1;
        for (hv_S=0; hv_S.Continue(end_val18, step_val18); hv_S = hv_S.TupleAdd(step_val18))
        {
          hv_EndIdx.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_EndIdx = (hv_StartIdx+hv_ColorsPerChunk)-1;
          }
          if ((int)(new HTuple(hv_S.TupleLess(hv_NumLeftOver))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_EndIdx = hv_EndIdx+1;
            hv_EndIdx.Dispose();
            hv_EndIdx = ExpTmpLocalVar_EndIdx;
            }
            }
          }
          hv_IdxsLeft.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_IdxsLeft = HTuple.TupleGenSequence(
              hv_S,hv_NumColors-1,hv_NumChunks);
          }
          hv_IdxsRight.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_IdxsRight = HTuple.TupleGenSequence(
              hv_StartIdx,hv_EndIdx,1);
          }
          if (hv_Colors == null)
            hv_Colors = new HTuple();
          hv_Colors[HTuple.TupleGenSequence(hv_S,hv_NumColors-1,hv_NumChunks)] = hv_ColorsRainbow.TupleSelectRange(
              hv_StartIdx,hv_EndIdx);
          hv_StartIdx.Dispose();
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_StartIdx = hv_EndIdx+1;
          }
        }
      }
      else
      {
        hv_Colors.Dispose();
        hv_Colors = new HTuple(hv_ColorsRainbow);
      }

      hv_NumColors.Dispose();
      hv_NumChunks.Dispose();
      hv_NumLeftOver.Dispose();
      hv_ColorsPerChunk.Dispose();
      hv_StartIdx.Dispose();
      hv_S.Dispose();
      hv_EndIdx.Dispose();
      hv_IdxsLeft.Dispose();
      hv_IdxsRight.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_NumColors.Dispose();
      hv_NumChunks.Dispose();
      hv_NumLeftOver.Dispose();
      hv_ColorsPerChunk.Dispose();
      hv_StartIdx.Dispose();
      hv_S.Dispose();
      hv_EndIdx.Dispose();
      hv_IdxsLeft.Dispose();
      hv_IdxsRight.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image1, ho_Image2, ho_MapL, ho_MapR;
    HObject ho_ImageRectifiedL, ho_ImageRectifiedR, ho_Distance;
    HObject ho_Score, ho_Regions, ho_ConnectedRegions, ho_SelectedRegions1;
    HObject ho_SelectedRegions, ho_ImageReduced1, ho_Region;
    HObject ho_Rectangle=null, ho_RegionUnion=null, ho_Rectangle1=null;
    HObject ho_Rectangle2=null, ho_ObjectSelectedL=null, ho_ObjectSelectedR=null;

    // Local control variables 

    HTuple hv_CamParamL = new HTuple(), hv_CamParamR = new HTuple();
    HTuple hv_cLPcR = new HTuple(), hv_RectCamParL = new HTuple();
    HTuple hv_RectCamParR = new HTuple(), hv_CamPoseRectL = new HTuple();
    HTuple hv_CamPoseRectR = new HTuple(), hv_RectLPosRectR = new HTuple();
    HTuple hv_Area1 = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Area2 = new HTuple();
    HTuple hv_ratio = new HTuple(), hv_ExampleDataDir = new HTuple();
    HTuple hv_PreprocessParamFileName = new HTuple(), hv_RetrainedModelFileName = new HTuple();
    HTuple hv_ClassNames = new HTuple(), hv_ClassIDs = new HTuple();
    HTuple hv_BatchSizeInference = new HTuple(), hv_MinConfidence = new HTuple();
    HTuple hv_MaxOverlap = new HTuple(), hv_MaxOverlapClassAgnostic = new HTuple();
    HTuple hv_UseGPU = new HTuple(), hv_CudaLoaded = new HTuple();
    HTuple hv_CuDNNLoaded = new HTuple(), hv_CuBlasLoaded = new HTuple();
    HTuple hv_DLModelHandle = new HTuple(), hv_DLPreprocessParam = new HTuple();
    HTuple hv_WindowHandleDict = new HTuple(), hv_DLDataInfo = new HTuple();
    HTuple hv_GenParam = new HTuple(), hv_DLSampleBatch = new HTuple();
    HTuple hv_DLResultBatch = new HTuple(), hv_DLSample = new HTuple();
    HTuple hv_DLResult = new HTuple(), hv_DetectedClassIDs = new HTuple();
    HTuple hv_box_row1 = new HTuple(), hv_box_col1 = new HTuple();
    HTuple hv_box_row2 = new HTuple(), hv_box_col2 = new HTuple();
    HTuple hv_Area3 = new HTuple(), hv_centerx = new HTuple();
    HTuple hv_centery = new HTuple(), hv_centerxL = new HTuple();
    HTuple hv_centeryL = new HTuple(), hv_centerxR = new HTuple();
    HTuple hv_centeryR = new HTuple(), hv_RegionIndex1 = new HTuple();
    HTuple hv_RegionIndexL2 = new HTuple(), hv_Area4 = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    HTuple hv_Row2_turn = new HTuple(), hv_Column2_turn = new HTuple();
    HTuple hv_Grayval1L = new HTuple(), hv_MaxL = new HTuple();
    HTuple hv_IndicesL = new HTuple(), hv_final_point = new HTuple();
    HTuple hv_RegionIndexR2 = new HTuple(), hv_Area5 = new HTuple();
    HTuple hv_Row3 = new HTuple(), hv_Column3 = new HTuple();
    HTuple hv_Row3_turn = new HTuple(), hv_Column3_turn = new HTuple();
    HTuple hv_Grayval1R = new HTuple(), hv_MaxZR = new HTuple();
    HTuple hv_IndicesR = new HTuple(), hv_WindowHandles = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image1);
    HOperatorSet.GenEmptyObj(out ho_Image2);
    HOperatorSet.GenEmptyObj(out ho_MapL);
    HOperatorSet.GenEmptyObj(out ho_MapR);
    HOperatorSet.GenEmptyObj(out ho_ImageRectifiedL);
    HOperatorSet.GenEmptyObj(out ho_ImageRectifiedR);
    HOperatorSet.GenEmptyObj(out ho_Distance);
    HOperatorSet.GenEmptyObj(out ho_Score);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion);
    HOperatorSet.GenEmptyObj(out ho_Rectangle1);
    HOperatorSet.GenEmptyObj(out ho_Rectangle2);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelectedL);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelectedR);
    try
    {

      ho_Image1.Dispose();
      HOperatorSet.ReadImage(out ho_Image1, "E:/Learncode/halcon/myhalconcode/success/Limg5cm.bmp");
      ho_Image2.Dispose();
      HOperatorSet.ReadImage(out ho_Image2, "E:/Learncode/halcon/myhalconcode/success/Rimg5cm.bmp");
      hv_CamParamL.Dispose();
      HOperatorSet.ReadCamPar("cam_left-125.dat", out hv_CamParamL);
      hv_CamParamR.Dispose();
      HOperatorSet.ReadCamPar("cam_right-125.dat", out hv_CamParamR);
      hv_cLPcR.Dispose();
      HOperatorSet.ReadPose("pos_right2left.dat", out hv_cLPcR);
      ho_MapL.Dispose();ho_MapR.Dispose();hv_RectCamParL.Dispose();hv_RectCamParR.Dispose();hv_CamPoseRectL.Dispose();hv_CamPoseRectR.Dispose();hv_RectLPosRectR.Dispose();
      HOperatorSet.GenBinocularRectificationMap(out ho_MapL, out ho_MapR, hv_CamParamL, 
          hv_CamParamR, hv_cLPcR, 1, "viewing_direction", "bilinear", out hv_RectCamParL, 
          out hv_RectCamParR, out hv_CamPoseRectL, out hv_CamPoseRectR, out hv_RectLPosRectR);
      ho_ImageRectifiedL.Dispose();
      HOperatorSet.MapImage(ho_Image1, ho_MapL, out ho_ImageRectifiedL);
      ho_ImageRectifiedR.Dispose();
      HOperatorSet.MapImage(ho_Image2, ho_MapR, out ho_ImageRectifiedR);

      //binocular_disparity (ImageRectifiedL, ImageRectifiedR, DisparityImage, Score1, 'ncc', 11, 11, 0, -340, -228, 1, 0.5, 'left_right_check', 'interpolation')
      ho_Distance.Dispose();ho_Score.Dispose();
      HOperatorSet.BinocularDistance(ho_ImageRectifiedL, ho_ImageRectifiedR, out ho_Distance, 
          out ho_Score, hv_RectCamParL, hv_RectCamParR, hv_RectLPosRectR, "ncc", 
          17, 17, 0, -350, -228, 1, -1, "left_right_check", "interpolation");




      ho_Regions.Dispose();
      HOperatorSet.Threshold(ho_Distance, out ho_Regions, 0, 0.7);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
      ho_SelectedRegions1.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions1, "max_area", 
          70);
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
          "and", 5000, 99999);
      hv_Area1.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_SelectedRegions, out hv_Area1, out hv_Row, out hv_Column);
      ho_ImageReduced1.Dispose();
      HOperatorSet.ReduceDomain(ho_Distance, ho_SelectedRegions, out ho_ImageReduced1
          );
      ho_Region.Dispose();
      HOperatorSet.Threshold(ho_ImageReduced1, out ho_Region, 0.6, 0.64);
      hv_Area2.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_Region, out hv_Area2, out hv_Row, out hv_Column);
      hv_ratio.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ratio = (1.0*hv_Area2)/(1.0*hv_Area1);
      }


      //deep object detection


      //
      //Set the paths of the retrained model and the corresponding preprocessing parameters.
      //Example data folder containing the outputs of the previous example series.
      hv_ExampleDataDir.Dispose();
      hv_ExampleDataDir = "E:/Learncode/halcon/csharp_code/object_dection/bincour_sharp/bincour_sharp/bin/Debug/model";
      hv_PreprocessParamFileName.Dispose();
      hv_PreprocessParamFileName = "E:/Learncode/halcon/csharp_code/object_dection/bincour_sharp/bincour_sharp/bin/Debug/model/dl_preprocess_param.hdict";
      //File name of the finetuned object detection model.
      hv_RetrainedModelFileName.Dispose();
      hv_RetrainedModelFileName = "E:/Learncode/halcon/csharp_code/object_dection/bincour_sharp/bincour_sharp/bin/Debug/model/best_dl_model_detection.hdl";
      hv_ClassNames.Dispose();
      hv_ClassNames = "bang";
      hv_ClassIDs.Dispose();
      hv_ClassIDs = 0;
      hv_BatchSizeInference.Dispose();
      hv_BatchSizeInference = 1;
      hv_MinConfidence.Dispose();
      hv_MinConfidence = 0.5;
      hv_MaxOverlap.Dispose();
      hv_MaxOverlap = 0.2;
      hv_MaxOverlapClassAgnostic.Dispose();
      hv_MaxOverlapClassAgnostic = 0.7;
      hv_UseGPU.Dispose();
      hv_UseGPU = 1;
      //
      if ((int)(hv_UseGPU) != 0)
      {
        hv_CudaLoaded.Dispose();
        HOperatorSet.GetSystem("cuda_loaded", out hv_CudaLoaded);
        hv_CuDNNLoaded.Dispose();
        HOperatorSet.GetSystem("cudnn_loaded", out hv_CuDNNLoaded);
        hv_CuBlasLoaded.Dispose();
        HOperatorSet.GetSystem("cublas_loaded", out hv_CuBlasLoaded);
        if ((int)((new HTuple((new HTuple((new HTuple(hv_CudaLoaded.TupleEqual("true"))).TupleAnd(
            new HTuple(hv_CuDNNLoaded.TupleEqual("true"))))).TupleAnd(new HTuple(hv_CuBlasLoaded.TupleEqual(
            "true"))))).TupleNot()) != 0)
        {
          hv_UseGPU.Dispose();
          hv_UseGPU = 0;
        }
      }

      //check_data_availability (ExampleDataDir, PreprocessParamFileName, RetrainedModelFileName, UsePretrainedModel)
      //
      //Read in the retrained model.
      hv_DLModelHandle.Dispose();
      HOperatorSet.ReadDlModel(hv_RetrainedModelFileName, out hv_DLModelHandle);
      //Set the batch size.
      HOperatorSet.SetDlModelParam(hv_DLModelHandle, "batch_size", hv_BatchSizeInference);
      //Initialize the model for inference.

      HOperatorSet.SetDlModelParam(hv_DLModelHandle, "runtime_init", "immediately");
      //Set postprocessing parameters for model.
      HOperatorSet.SetDlModelParam(hv_DLModelHandle, "min_confidence", hv_MinConfidence);
      HOperatorSet.SetDlModelParam(hv_DLModelHandle, "max_overlap", hv_MaxOverlap);
      HOperatorSet.SetDlModelParam(hv_DLModelHandle, "max_overlap_class_agnostic", 
          hv_MaxOverlapClassAgnostic);
      //
      //Get the parameters used for preprocessing.
      hv_DLPreprocessParam.Dispose();
      HOperatorSet.ReadDict(hv_PreprocessParamFileName, new HTuple(), new HTuple(), 
          out hv_DLPreprocessParam);
      //
      //Create window dictionary for displaying results.
      hv_WindowHandleDict.Dispose();
      HOperatorSet.CreateDict(out hv_WindowHandleDict);
      //Create dictionary with dataset parameters necessary for displaying.
      hv_DLDataInfo.Dispose();
      HOperatorSet.CreateDict(out hv_DLDataInfo);
      HOperatorSet.SetDictTuple(hv_DLDataInfo, "class_names", hv_ClassNames);
      HOperatorSet.SetDictTuple(hv_DLDataInfo, "class_ids", hv_ClassIDs);
      //Set generic parameters for visualization.
      hv_GenParam.Dispose();
      HOperatorSet.CreateDict(out hv_GenParam);
      HOperatorSet.SetDictTuple(hv_GenParam, "scale_windows", 1.2);
      //
      //List the files, the model should be applied to (e.g. using list_image_files).
      //For this example, we select some images manually.
      //get_example_inference_images (ImageDir, ImageFiles)
      //
      //Loop over all images in batches of size BatchSizeInference for inference.


      //
      //Generate the DLSampleBatch.
      hv_DLSampleBatch.Dispose();
      gen_dl_samples_from_images(ho_ImageRectifiedL, out hv_DLSampleBatch);
      //
      //Preprocess the DLSampleBatch.
      preprocess_dl_samples(hv_DLSampleBatch, hv_DLPreprocessParam);
      //
      //Apply the DL model on the DLSampleBatch.
      hv_DLResultBatch.Dispose();
      HOperatorSet.ApplyDlModel(hv_DLModelHandle, hv_DLSampleBatch, new HTuple(), 
          out hv_DLResultBatch);
      //
      //Postprocessing and visualization.
      //Loop over each sample in the batch.
      //for SampleIndex := 0 to BatchSizeInference - 1 by 1
        //
        //Get sample and according results.
        hv_DLSample.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DLSample = hv_DLSampleBatch.TupleSelect(
            0);
        }
        hv_DLResult.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_DLResult = hv_DLResultBatch.TupleSelect(
            0);
        }
        //
        //Count detected pills for each class.

        dev_display_dl_data(hv_DLSample, hv_DLResult, hv_DLDataInfo, "bbox_result", 
            hv_GenParam, hv_WindowHandleDict);
        hv_DetectedClassIDs.Dispose();
        HOperatorSet.GetDictTuple(hv_DLResult, "bbox_class_id", out hv_DetectedClassIDs);
        hv_box_row1.Dispose();
        HOperatorSet.GetDictTuple(hv_DLResult, "bbox_row1", out hv_box_row1);
        hv_box_col1.Dispose();
        HOperatorSet.GetDictTuple(hv_DLResult, "bbox_col1", out hv_box_col1);
        hv_box_row2.Dispose();
        HOperatorSet.GetDictTuple(hv_DLResult, "bbox_row2", out hv_box_row2);
        hv_box_col2.Dispose();
        HOperatorSet.GetDictTuple(hv_DLResult, "bbox_col2", out hv_box_col2);

        ho_Rectangle.Dispose();
        HOperatorSet.GenRectangle1(out ho_Rectangle, hv_box_row1, hv_box_col1, hv_box_row2, 
            hv_box_col2);
        ho_RegionUnion.Dispose();
        HOperatorSet.Union1(ho_Rectangle, out ho_RegionUnion);
        hv_Area3.Dispose();hv_centerx.Dispose();hv_centery.Dispose();
        HOperatorSet.AreaCenter(ho_RegionUnion, out hv_Area3, out hv_centerx, out hv_centery);

        hv_centerxL.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_centerxL = hv_centerx-10;
        }
        hv_centeryL.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_centeryL = hv_centery-30;
        }
        ho_Rectangle1.Dispose();
        HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_centerxL, hv_centeryL, 0, 
            2, 2);

        hv_centerxR.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_centerxR = hv_centerx-10;
        }
        hv_centeryR.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_centeryR = hv_centery+30;
        }
        ho_Rectangle2.Dispose();
        HOperatorSet.GenRectangle2(out ho_Rectangle2, hv_centerxR, hv_centeryR, 0, 
            2, 2);

        hv_RegionIndex1.Dispose();hv_RegionIndexL2.Dispose();
        HOperatorSet.FindNeighbors(ho_Rectangle1, ho_Rectangle, 8, out hv_RegionIndex1, 
            out hv_RegionIndexL2);
        ho_ObjectSelectedL.Dispose();
        HOperatorSet.SelectObj(ho_Rectangle, out ho_ObjectSelectedL, hv_RegionIndexL2);
        hv_Area4.Dispose();hv_Row2.Dispose();hv_Column2.Dispose();
        HOperatorSet.AreaCenter(ho_ObjectSelectedL, out hv_Area4, out hv_Row2, out hv_Column2);
        hv_Row2_turn.Dispose();
        HOperatorSet.TupleDiv(hv_Row2, 0.331, out hv_Row2_turn);
        hv_Column2_turn.Dispose();
        HOperatorSet.TupleDiv(hv_Column2, 0.389, out hv_Column2_turn);
        hv_Grayval1L.Dispose();
        HOperatorSet.GetGrayval(ho_Distance, hv_Row2_turn, hv_Column2_turn, out hv_Grayval1L);
        hv_MaxL.Dispose();
        HOperatorSet.TupleMax(hv_Grayval1L, out hv_MaxL);
        hv_IndicesL.Dispose();
        HOperatorSet.TupleFind(hv_Grayval1L, hv_MaxL, out hv_IndicesL);
        hv_final_point.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_final_point = hv_Row2_turn.TupleSelect(
            hv_IndicesL);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleConcat(hv_final_point, hv_Column2_turn.TupleSelect(hv_IndicesL), 
            out ExpTmpOutVar_0);
        hv_final_point.Dispose();
        hv_final_point = ExpTmpOutVar_0;
        }


        hv_RegionIndex1.Dispose();hv_RegionIndexR2.Dispose();
        HOperatorSet.FindNeighbors(ho_Rectangle2, ho_Rectangle, 8, out hv_RegionIndex1, 
            out hv_RegionIndexR2);
        ho_ObjectSelectedR.Dispose();
        HOperatorSet.SelectObj(ho_Rectangle, out ho_ObjectSelectedR, hv_RegionIndexR2);
        hv_Area5.Dispose();hv_Row3.Dispose();hv_Column3.Dispose();
        HOperatorSet.AreaCenter(ho_ObjectSelectedR, out hv_Area5, out hv_Row3, out hv_Column3);
        hv_Row3_turn.Dispose();
        HOperatorSet.TupleDiv(hv_Row3, 0.331, out hv_Row3_turn);
        hv_Column3_turn.Dispose();
        HOperatorSet.TupleDiv(hv_Column3, 0.389, out hv_Column3_turn);
        hv_Grayval1R.Dispose();
        HOperatorSet.GetGrayval(ho_Distance, hv_Row3_turn, hv_Column3_turn, out hv_Grayval1R);
        hv_MaxZR.Dispose();
        HOperatorSet.TupleMax(hv_Grayval1R, out hv_MaxZR);
        hv_IndicesR.Dispose();
        HOperatorSet.TupleFind(hv_Grayval1R, hv_MaxZR, out hv_IndicesR);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleConcat(hv_final_point, hv_Row3_turn.TupleSelect(hv_IndicesR), 
            out ExpTmpOutVar_0);
        hv_final_point.Dispose();
        hv_final_point = ExpTmpOutVar_0;
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        HTuple ExpTmpOutVar_0;
        HOperatorSet.TupleConcat(hv_final_point, hv_Column3_turn.TupleSelect(hv_IndicesR), 
            out ExpTmpOutVar_0);
        hv_final_point.Dispose();
        hv_final_point = ExpTmpOutVar_0;
        }



        dev_display_dl_data(hv_DLSample, hv_DLResult, hv_DLDataInfo, "bbox_result", 
            hv_GenParam, hv_WindowHandleDict);
        hv_WindowHandles.Dispose();
        HOperatorSet.GetDictTuple(hv_WindowHandleDict, "bbox_result", out hv_WindowHandles);

        //dev_set_window(...);

        HDevelopStop();
      //endfor

      //
      //Close windows used for visualization.
      dev_close_window_dict(hv_WindowHandleDict);
      //
      //

    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image1.Dispose();
      ho_Image2.Dispose();
      ho_MapL.Dispose();
      ho_MapR.Dispose();
      ho_ImageRectifiedL.Dispose();
      ho_ImageRectifiedR.Dispose();
      ho_Distance.Dispose();
      ho_Score.Dispose();
      ho_Regions.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_SelectedRegions.Dispose();
      ho_ImageReduced1.Dispose();
      ho_Region.Dispose();
      ho_Rectangle.Dispose();
      ho_RegionUnion.Dispose();
      ho_Rectangle1.Dispose();
      ho_Rectangle2.Dispose();
      ho_ObjectSelectedL.Dispose();
      ho_ObjectSelectedR.Dispose();

      hv_CamParamL.Dispose();
      hv_CamParamR.Dispose();
      hv_cLPcR.Dispose();
      hv_RectCamParL.Dispose();
      hv_RectCamParR.Dispose();
      hv_CamPoseRectL.Dispose();
      hv_CamPoseRectR.Dispose();
      hv_RectLPosRectR.Dispose();
      hv_Area1.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Area2.Dispose();
      hv_ratio.Dispose();
      hv_ExampleDataDir.Dispose();
      hv_PreprocessParamFileName.Dispose();
      hv_RetrainedModelFileName.Dispose();
      hv_ClassNames.Dispose();
      hv_ClassIDs.Dispose();
      hv_BatchSizeInference.Dispose();
      hv_MinConfidence.Dispose();
      hv_MaxOverlap.Dispose();
      hv_MaxOverlapClassAgnostic.Dispose();
      hv_UseGPU.Dispose();
      hv_CudaLoaded.Dispose();
      hv_CuDNNLoaded.Dispose();
      hv_CuBlasLoaded.Dispose();
      hv_DLModelHandle.Dispose();
      hv_DLPreprocessParam.Dispose();
      hv_WindowHandleDict.Dispose();
      hv_DLDataInfo.Dispose();
      hv_GenParam.Dispose();
      hv_DLSampleBatch.Dispose();
      hv_DLResultBatch.Dispose();
      hv_DLSample.Dispose();
      hv_DLResult.Dispose();
      hv_DetectedClassIDs.Dispose();
      hv_box_row1.Dispose();
      hv_box_col1.Dispose();
      hv_box_row2.Dispose();
      hv_box_col2.Dispose();
      hv_Area3.Dispose();
      hv_centerx.Dispose();
      hv_centery.Dispose();
      hv_centerxL.Dispose();
      hv_centeryL.Dispose();
      hv_centerxR.Dispose();
      hv_centeryR.Dispose();
      hv_RegionIndex1.Dispose();
      hv_RegionIndexL2.Dispose();
      hv_Area4.Dispose();
      hv_Row2.Dispose();
      hv_Column2.Dispose();
      hv_Row2_turn.Dispose();
      hv_Column2_turn.Dispose();
      hv_Grayval1L.Dispose();
      hv_MaxL.Dispose();
      hv_IndicesL.Dispose();
      hv_final_point.Dispose();
      hv_RegionIndexR2.Dispose();
      hv_Area5.Dispose();
      hv_Row3.Dispose();
      hv_Column3.Dispose();
      hv_Row3_turn.Dispose();
      hv_Column3_turn.Dispose();
      hv_Grayval1R.Dispose();
      hv_MaxZR.Dispose();
      hv_IndicesR.Dispose();
      hv_WindowHandles.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image1.Dispose();
    ho_Image2.Dispose();
    ho_MapL.Dispose();
    ho_MapR.Dispose();
    ho_ImageRectifiedL.Dispose();
    ho_ImageRectifiedR.Dispose();
    ho_Distance.Dispose();
    ho_Score.Dispose();
    ho_Regions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions1.Dispose();
    ho_SelectedRegions.Dispose();
    ho_ImageReduced1.Dispose();
    ho_Region.Dispose();
    ho_Rectangle.Dispose();
    ho_RegionUnion.Dispose();
    ho_Rectangle1.Dispose();
    ho_Rectangle2.Dispose();
    ho_ObjectSelectedL.Dispose();
    ho_ObjectSelectedR.Dispose();

    hv_CamParamL.Dispose();
    hv_CamParamR.Dispose();
    hv_cLPcR.Dispose();
    hv_RectCamParL.Dispose();
    hv_RectCamParR.Dispose();
    hv_CamPoseRectL.Dispose();
    hv_CamPoseRectR.Dispose();
    hv_RectLPosRectR.Dispose();
    hv_Area1.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Area2.Dispose();
    hv_ratio.Dispose();
    hv_ExampleDataDir.Dispose();
    hv_PreprocessParamFileName.Dispose();
    hv_RetrainedModelFileName.Dispose();
    hv_ClassNames.Dispose();
    hv_ClassIDs.Dispose();
    hv_BatchSizeInference.Dispose();
    hv_MinConfidence.Dispose();
    hv_MaxOverlap.Dispose();
    hv_MaxOverlapClassAgnostic.Dispose();
    hv_UseGPU.Dispose();
    hv_CudaLoaded.Dispose();
    hv_CuDNNLoaded.Dispose();
    hv_CuBlasLoaded.Dispose();
    hv_DLModelHandle.Dispose();
    hv_DLPreprocessParam.Dispose();
    hv_WindowHandleDict.Dispose();
    hv_DLDataInfo.Dispose();
    hv_GenParam.Dispose();
    hv_DLSampleBatch.Dispose();
    hv_DLResultBatch.Dispose();
    hv_DLSample.Dispose();
    hv_DLResult.Dispose();
    hv_DetectedClassIDs.Dispose();
    hv_box_row1.Dispose();
    hv_box_col1.Dispose();
    hv_box_row2.Dispose();
    hv_box_col2.Dispose();
    hv_Area3.Dispose();
    hv_centerx.Dispose();
    hv_centery.Dispose();
    hv_centerxL.Dispose();
    hv_centeryL.Dispose();
    hv_centerxR.Dispose();
    hv_centeryR.Dispose();
    hv_RegionIndex1.Dispose();
    hv_RegionIndexL2.Dispose();
    hv_Area4.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_Row2_turn.Dispose();
    hv_Column2_turn.Dispose();
    hv_Grayval1L.Dispose();
    hv_MaxL.Dispose();
    hv_IndicesL.Dispose();
    hv_final_point.Dispose();
    hv_RegionIndexR2.Dispose();
    hv_Area5.Dispose();
    hv_Row3.Dispose();
    hv_Column3.Dispose();
    hv_Row3_turn.Dispose();
    hv_Column3_turn.Dispose();
    hv_Grayval1R.Dispose();
    hv_MaxZR.Dispose();
    hv_IndicesR.Dispose();
    hv_WindowHandles.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

