//
// File generated by HDevelop for HALCON/.NET (C#) Version 19.11.0.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;
using bincour_sharp;

public partial class HDevelopExport
{
    public HTuple hv_ExpDefaultWinHandle;
    public HObject ho_ImageAffineTrans;
    public HTuple hv_Row_Measure_01_0 = new HTuple();
    public HTuple hv_Column_Measure_01_0 = new HTuple();
    public HTuple hv_door_pos = new HTuple();
    HTuple hv_door_range = new HTuple();
    // Main procedure 
    private HTuple action()
  {


    // Local iconic variables 

    HObject ho_Image = null;
    HObject ho_Region=null, ho_RegionErosion=null, ho_RegionOpening=null;
    HObject ho_ConnectedRegions=null, ho_SelectedRegions1=null;
    HObject ho_RegionTrans1=null, ho_Rectangle=null;

    // Local control variables 
     
    HTuple hv_WindowHandle = new HTuple(), hv_AcqHandle = new HTuple();
    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_AmplitudeThreshold = new HTuple(), hv_RoiWidthLen2 = new HTuple();
    HTuple hv_center_row = new HTuple(), hv_phi = new HTuple();
    HTuple hv_lenth1 = new HTuple(), hv_lenth2 = new HTuple();
    HTuple  hv_num = new HTuple();
    HTuple hv_flag = new HTuple(), hv_inok = new HTuple();
    HTuple hv_HomMat2DIdentity = new HTuple(), hv_HomMat2DRotate = new HTuple();
    HTuple hv_Rows = new HTuple(), hv_Columns = new HTuple();
    HTuple hv_Area = new HTuple(), hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_center_col = new HTuple(), hv_MsrHandle_Measure_01_0 = new HTuple();
   
    HTuple hv_Amplitude_Measure_01_0 = new HTuple(), hv_Distance_Measure_01_0 = new HTuple();
    HTuple hv_Length = new HTuple(), hv_IsSubset = new HTuple();
        
    // Initialize local and output iconic variables 

        HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_RegionOpening);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_RegionTrans1);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    try
    {
    //dev_close_window(...);
    //dev_open_window(...);
    //Image Acquisition 01: Code generated by Image Acquisition 01
    hv_AcqHandle.Dispose();
    //HOperatorSet.OpenFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default", -1,  "default", -1, "false", "default", "c42f90fae958_Hikvision_MVCA06011GM",  0, -1, out hv_AcqHandle);
    //Image Acquisition 01: Do something
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "./img/2.5open.bmp");    
    //open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'c42f90fae958_Hikvision_MVCA06011GM', 0, -1, AcqHandle)
    //set_framegrabber_param (AcqHandle, 'ExposureTime', 1000.0)
    //grab_image_start (AcqHandle, -1)
    //ho_Image.Dispose();
    //HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
    hv_Width.Dispose();
    hv_Height.Dispose();
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

    hv_AmplitudeThreshold.Dispose();
    hv_AmplitudeThreshold = 80;
    hv_RoiWidthLen2.Dispose();
    hv_RoiWidthLen2 = 100.5;
    hv_center_row.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_center_row = hv_Width/2;
    }
    hv_phi.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_phi = (new HTuple(-90)).TupleRad();
    }
    hv_lenth1.Dispose();
    hv_lenth1 = new HTuple(hv_Height);
    hv_lenth2.Dispose();
    hv_lenth2 = 30;
    
    hv_num.Dispose();
    hv_num = 0;
    hv_flag.Dispose();
    hv_flag = 0;
    hv_inok.Dispose();
    hv_inok = 0;
    while ((int)(new HTuple(hv_num.TupleLess(2))) != 0)
    {
      //dev_set_color ('green')
      //ho_Image.Dispose();
      //HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
      //Image Acquisition 01: Do something
      hv_HomMat2DIdentity.Dispose();
      HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HomMat2DRotate.Dispose();
      HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity, (new HTuple(3)).TupleRad()
          , hv_Width/2, hv_Height/2, out hv_HomMat2DRotate);
      }
      ho_ImageAffineTrans.Dispose();
      HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffineTrans, hv_HomMat2DRotate, 
          "constant", "false");
      ho_Region.Dispose();
      HOperatorSet.Threshold(ho_ImageAffineTrans, out ho_Region, 128, 255);
      ho_RegionErosion.Dispose();
      HOperatorSet.ErosionRectangle1(ho_Region, out ho_RegionErosion, 11, 11);
      ho_RegionOpening.Dispose();
      HOperatorSet.OpeningCircle(ho_RegionErosion, out ho_RegionOpening, 3.5);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
      ho_SelectedRegions1.Dispose();
      HOperatorSet.SelectShapeStd(ho_ConnectedRegions, out ho_SelectedRegions1, "max_area", 
          70);
      ho_RegionTrans1.Dispose();
      HOperatorSet.ShapeTrans(ho_SelectedRegions1, out ho_RegionTrans1, "rectangle1");
      hv_Rows.Dispose();hv_Columns.Dispose();
      HOperatorSet.GetRegionPolygon(ho_RegionTrans1, 10, out hv_Rows, out hv_Columns);
      hv_Area.Dispose();hv_Row.Dispose();hv_Column.Dispose();
      HOperatorSet.AreaCenter(ho_RegionTrans1, out hv_Area, out hv_Row, out hv_Column);
      hv_center_row.Dispose();
      hv_center_row = new HTuple(hv_Row);
      hv_center_col.Dispose();
      hv_center_col = new HTuple(hv_Column);
      hv_MsrHandle_Measure_01_0.Dispose();
      HOperatorSet.GenMeasureRectangle2(hv_center_row, hv_center_col, hv_phi, hv_lenth1, hv_lenth2, 3072, 2048, "nearest_neighbor", out hv_MsrHandle_Measure_01_0);
      //Measure 01: ***************************************************************
      if ((int)(hv_Area) != 0)
      {
        hv_Row_Measure_01_0.Dispose();hv_Column_Measure_01_0.Dispose();hv_Amplitude_Measure_01_0.Dispose();hv_Distance_Measure_01_0.Dispose();
        HOperatorSet.MeasurePos(ho_ImageAffineTrans, hv_MsrHandle_Measure_01_0, 5, hv_AmplitudeThreshold, "all", "first", out hv_Row_Measure_01_0, out hv_Column_Measure_01_0, out hv_Amplitude_Measure_01_0, out hv_Distance_Measure_01_0);
        hv_Length.Dispose();
        HOperatorSet.TupleLength(hv_Row_Measure_01_0, out hv_Length);
        if ((int)(new HTuple(hv_Length.TupleNotEqual(0))) != 0)
        {
          HTuple subvalue = new HTuple();
         HOperatorSet.TupleAbs((hv_Row_Measure_01_0 - hv_door_pos), out subvalue);
          if (subvalue<hv_door_range)
          {
            hv_flag.Dispose();
            hv_flag = 1;
          }
         
        }
      }
                //using (HDevDisposeHelper dh = new HDevDisposeHelper())
                //{
                //ho_Rectangle.Dispose();
                //HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row_Measure_01_0+20, hv_Column_Measure_01_0+20, hv_Row_Measure_01_0+200, hv_Column_Measure_01_0+ hv_door_region);
                //}
                //hv_IsSubset.Dispose();
                //HOperatorSet.TestSubsetRegion(ho_Rectangle, ho_RegionOpening, out hv_IsSubset);  if ((int)(hv_flag.TupleAnd(hv_IsSubset)) != 0)
      if ((int)hv_flag!= 0)
      {
        hv_inok.Dispose();
        hv_inok = 1;
        break;
      }
      else
      { 
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
            HTuple ExpTmpLocalVar_num = hv_num+1;
            hv_num.Dispose();
            hv_num = ExpTmpLocalVar_num;
          }
          }
          HOperatorSet.WaitSeconds(0.5);
     }
    }
    //HOperatorSet.CloseFramegrabber(hv_AcqHandle);
    }
    catch(Exception ex)
    {
            ho_Image.Dispose();
            ho_Region.Dispose();
            ho_RegionErosion.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_RegionTrans1.Dispose();
            ho_Rectangle.Dispose();

            hv_WindowHandle.Dispose();
            hv_AcqHandle.Dispose();
            hv_Width.Dispose();
            hv_Height.Dispose();
            hv_AmplitudeThreshold.Dispose();
            hv_RoiWidthLen2.Dispose();
            hv_center_row.Dispose();
            hv_phi.Dispose();
            hv_lenth1.Dispose();
            hv_lenth2.Dispose();
            hv_door_pos.Dispose();
            hv_num.Dispose();
            hv_flag.Dispose();
            hv_inok.Dispose();
            hv_HomMat2DIdentity.Dispose();
            hv_HomMat2DRotate.Dispose();
            hv_Rows.Dispose();
            hv_Columns.Dispose();
            hv_Area.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_center_col.Dispose();
            hv_MsrHandle_Measure_01_0.Dispose();
            hv_Row_Measure_01_0.Dispose();
            hv_Column_Measure_01_0.Dispose();
            hv_Amplitude_Measure_01_0.Dispose();
            hv_Distance_Measure_01_0.Dispose();
            hv_Length.Dispose();
            hv_IsSubset.Dispose();
        }
    ho_Image.Dispose();
    //ho_ImageAffineTrans.Dispose();
    ho_Region.Dispose();
    ho_RegionErosion.Dispose();
    ho_RegionOpening.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions1.Dispose();
    ho_RegionTrans1.Dispose();
    ho_Rectangle.Dispose();

    hv_WindowHandle.Dispose();
    hv_AcqHandle.Dispose();
    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_AmplitudeThreshold.Dispose();
    hv_RoiWidthLen2.Dispose();
    hv_center_row.Dispose();
    hv_phi.Dispose();
    hv_lenth1.Dispose();
    hv_lenth2.Dispose();
    hv_door_pos.Dispose();
    hv_num.Dispose();
    hv_flag.Dispose();
    hv_inok.Dispose();
    hv_HomMat2DIdentity.Dispose();
    hv_HomMat2DRotate.Dispose();
    hv_Rows.Dispose();
    hv_Columns.Dispose();
    hv_Area.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_center_col.Dispose();
    hv_MsrHandle_Measure_01_0.Dispose();
    //hv_Row_Measure_01_0.Dispose();
    //hv_Column_Measure_01_0.Dispose();
    hv_Amplitude_Measure_01_0.Dispose();
    hv_Distance_Measure_01_0.Dispose();
    hv_Length.Dispose();
    hv_IsSubset.Dispose();
    return hv_inok;

  }
    //初始化全局参数
  public void InitHalcon(HTuple doorpos, HTuple subvalue)
  {
        HOperatorSet.GenEmptyObj(out ho_ImageAffineTrans);
        hv_door_pos.Dispose();
        hv_door_range.Dispose();
        hv_door_pos = doorpos;
        hv_door_range = subvalue;
   }
  
  public HTuple RunHalcon()
  {      
      HTuple flag=action();
      return flag;
  }

}

