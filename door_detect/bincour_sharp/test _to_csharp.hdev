<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.11.0.0">
<procedure name="main">
<interface/>
<body>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2,1]" as_ord="1">*  open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', 'c42f90fae958_Hikvision_MVCA06011GM', 0, -1, AcqHandle)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">* Image Acquisition 01: Do something</c>
<l>read_image (Image, 'C:/Users/Administrator/Desktop/近期项目文件/电炉炉口照片/9-2第一次/3.8open.bmp')</l>
<l>*  read_image (Imagep, 'C:/Users/Administrator/MVS/Data/下午人工测温.bmp')</l>
<l>*  read_image (Imagef, 'C:/Users/Administrator/Desktop/近期项目文件/电炉炉口照片/9-2第一次/3.8open.bmp')</l>
<l>*  read_image (Imagej, 'C:/Users/Administrator/Desktop/近期项目文件/电炉炉口照片/8.29/第二波/下午第二次机器人测温2.45.bmp')</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2,1]" as_ord="1">* open_framegrabber ('GigEVision', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', 'c42f90fae958_Hikvision_MVCA06011GM', 0, -1, AcqHandle)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2,2]" as_ord="1">* set_framegrabber_param (AcqHandle, 'ExposureTime', 1000.0)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,1]" as_ord="1">*  grab_image_start (AcqHandle, -1)</l>
<l>*  grab_image_async (Image, AcqHandle, -1)</l>
<l>get_image_size (Image, Width, Height)</l>
<c></c>
<l>AmplitudeThreshold := 80</l>
<l>RoiWidthLen2 := 100.5</l>
<l>center_row:=Width/2</l>
<l>phi:=rad(-90)</l>
<l>lenth1:=Height</l>
<l>lenth2:=30</l>
<l>door_pos:=1200</l>
<l>num:=0</l>
<l>flag:=true</l>
<l>inok:=false</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1"> while (num&lt;10)</l>
<l>*     dev_set_color ('green')</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">*      grab_image_async (Image, AcqHandle, -1)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<l>    hom_mat2d_identity (HomMat2DIdentity)</l>
<l>    hom_mat2d_rotate (HomMat2DIdentity, rad(3), Width/2, Height/2, HomMat2DRotate)</l>
<l>    affine_trans_image (Image, ImageAffineTrans, HomMat2DRotate, 'constant', 'false')</l>
<l>    threshold (ImageAffineTrans, Region, 128, 255)</l>
<l>    erosion_rectangle1 (Region, RegionErosion, 11, 11)</l>
<l>    opening_circle (RegionErosion, RegionOpening, 3.5)</l>
<l>    connection (RegionOpening, ConnectedRegions)</l>
<l>    select_shape_std (ConnectedRegions, SelectedRegions1, 'max_area', 70)</l>
<l>    shape_trans (SelectedRegions1, RegionTrans1, 'rectangle1')</l>
<l>    get_region_polygon (RegionTrans1, 10, Rows, Columns)    </l>
<l>    area_center (RegionTrans1, Area, Row, Column)</l>
<l>    center_col:=Column</l>
<l>    gen_measure_rectangle2 (Row, Column, phi, lenth1, lenth2, 3072, 2048, 'nearest_neighbor', MsrHandle_Measure_01_0)</l>
<c>* Measure 01: ***************************************************************</c>
<l>    if (Area)</l>
<l>        disp_rectangle2 (WindowHandle, Row, Column, 0,lenth2 ,lenth1 )</l>
<c>* Measure 01: Execute measurements</c>
<l>    measure_pos (ImageAffineTrans, MsrHandle_Measure_01_0, 5, AmplitudeThreshold, 'all', 'first', Row_Measure_01_0, Column_Measure_01_0, Amplitude_Measure_01_0, Distance_Measure_01_0)</l>
<c>* Measure 01: Do something with the results</c>
<l>    dev_set_color ('red')</l>
<l>    disp_cross (WindowHandle, Row_Measure_01_0, Column_Measure_01_0, 50, 50)</l>
<l>    tuple_length (Row_Measure_01_0, Length)</l>
<l>    if (Length!=0)</l>
<l>        if(|Row_Measure_01_0-door_pos|&lt;10)</l>
<l>            flag:=true</l>
<l>        endif</l>
<l>        dev_set_color ('green')</l>
<l>        disp_line (WindowHandle, Row_Measure_01_0, Column_Measure_01_0-Amplitude_Measure_01_0, Row_Measure_01_0, Column_Measure_01_0+Amplitude_Measure_01_0)</l>
<l>    endif   </l>
<l>   endif</l>
<l>gen_rectangle1 (Rectangle, Row_Measure_01_0+20, Column_Measure_01_0+20, Row_Measure_01_0+200, Column_Measure_01_0+350)</l>
<l>test_subset_region (Rectangle, RegionOpening, IsSubset)</l>
<l>if(flag and IsSubset)</l>
<l>    inok:=true</l>
<l>    break</l>
<l>endif</l>
<l>num:=num+1</l>
<l> endwhile</l>
<l>* close_framegrabber (AcqHandle)</l>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
